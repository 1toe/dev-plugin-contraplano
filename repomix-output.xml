This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
Archivos old/archivos originales en txt/flipbook-plugin-php.txt
Archivos old/archivos originales en txt/fp-front-css.txt
Archivos old/archivos originales en txt/fp-front-js.txt
Archivos old/archivos originales en txt/instalar.txt
Archivos old/asd/Plugin Matias/css.css
Archivos old/asd/Plugin Matias/flipbook-plugin.php
Archivos old/asd/Plugin Matias/js.js
Archivos old/fp-sin-turnJS/css/fp-front.css
Archivos old/fp-sin-turnJS/flipbook-plugin.php
Archivos old/fp-sin-turnJS/js/fp-front.js
flipbook-contraplano/changelog.md
flipbook-contraplano/css/fp-front.css
flipbook-contraplano/flipbook-plugin.php
flipbook-contraplano/instalar.txt
flipbook-contraplano/install nuevo.txt
flipbook-contraplano/js/fp-admin.js
flipbook-contraplano/js/fp-custom-zoom.js
flipbook-contraplano/js/fp-front.js
flipbook-contraplano/js/fp-gutenberg-button.js
flipbook-contraplano/js/fp-insert-flipbook.js
Flujo de uso plugin.txt
README.md
todo.md
uso e instalación con ID.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="uso e instalación con ID.md">
**Tutorial: Aplicar Flipbook Vía Shortcode en WordPress**

### **1. Instalar y Activar el Plugin**

**Paso 1:** Asegúrate de que el archivo `flipbook-plugin-php.txt` esté en `wp-content/plugins/`.

**Paso 2:** Activa el plugin desde el panel de WordPress en "Plugins".

---

### **2. Crear un Flipbook**

**Paso 1:** En el panel de WordPress, ve a  **"Flipbooks" -> "Agregar nuevo"** .

**Paso 2:** Asigna un título, por ejemplo, "Mi Catálogo Interactivo".

**Paso 3:** En la caja  **"Configuración del Flipbook"** :

* Haz clic en **"Subir o seleccionar PDF"** y elige tu archivo.
* Opcionalmente, selecciona un  **archivo de audio** .
* Haz clic en  **"Publicar"** .

**Paso 4:** Obtén el **ID del Flipbook** mirando la URL en la barra de direcciones. Ejemplo:

* `...wp-admin/post.php?post=`
* **ID = 9816**

---

### **3. Insertar el Shortcode en una Página o Entrada**

**Paso 1:** Ve a la página o entrada donde quieres mostrar el Flipbook.

**Paso 2:** Edita la página y agrega un bloque  **"Shortcode"** .

**Paso 3:** Dentro del bloque, escribe:

```
[flipbook id="1234"]
```

*(Reemplaza 1234 con el ID real de tu Flipbook.)*

**Paso 4:** Guarda o actualiza la página.

---

### **4. Pasos Adicionales para la Visualización Correcta**

Para que el Flipbook se renderice correctamente en el frontend:

✅ **Cargar las bibliotecas necesarias:** Asegurar que **PDF.js** y **Turn.js** estén encoladas en las páginas donde se usa el shortcode.

✅ **Encolar JS y CSS:** Modificar el plugin PHP para encolar `fp-front.js` y `fp-front.css` en el frontend.

✅ **Corregir JavaScript:**

* Ajustar `fp-front.js` para que obtenga el PDF del atributo `data-pdf`.
* Asegurar que los selectores CSS coincidan con el HTML generado.
* Implementar lógica para reproducir audio desde `data-audio`.

✅ **Interactividad Avanzada:**

* Definir áreas interactivas en el admin (posible metabox).
* Guardar los datos en el Flipbook.
* Emitir datos con el shortcode (`data-attributes`).
* Leer y posicionar interacciones con JS.

✅ **Corregir CSS:** Asegurar que los estilos sean correctos para los contenedores del Flipbook.

---

**Resultado esperado:** Si todo está bien configurado, el Flipbook se mostrará correctamente en la página con interactividad y audio. Sin estos pasos, solo se mostrará un "Cargando Flipbook..." sin contenido visible.
</file>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path="Archivos old/archivos originales en txt/flipbook-plugin-php.txt">
<?php
/*
Plugin Name: Flipbook Plugin
Plugin URI: https://contraplano.cl
Description: Plugin para visualizar PDFs con efecto flipbook, áreas interactivas y audios en la Edición Especial.
Version: 1.0
Author: contraplano.cl
Author URI: https://contraplano.cl
License: GPL2
*/

// Evitamos el acceso directo.
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * Registra el Custom Post Type "flipbook"
 */
function fp_register_flipbook_cpt() {
    $labels = array(
        'name'                  => 'Flipbooks',
        'singular_name'         => 'Flipbook',
        'menu_name'             => 'Flipbooks',
        'name_admin_bar'        => 'Flipbook',
        'add_new'               => 'Agregar Nuevo',
        'add_new_item'          => 'Agregar Nuevo Flipbook',
        'new_item'              => 'Nuevo Flipbook',
        'edit_item'             => 'Editar Flipbook',
        'view_item'             => 'Ver Flipbook',
        'all_items'             => 'Todos los Flipbooks',
        'search_items'          => 'Buscar Flipbooks',
        'not_found'             => 'No se encontraron Flipbooks.',
        'not_found_in_trash'    => 'No se encontraron Flipbooks en la papelera.'
    );
    $args = array(
        'labels'                => $labels,
        'public'                => true,
        'has_archive'           => true,
        'rewrite'               => array('slug' => 'flipbook'),
        'supports'              => array('title', 'editor', 'thumbnail'),
        'menu_icon'             => 'dashicons-book-alt',
    );
    register_post_type( 'flipbook', $args );
}
add_action( 'init', 'fp_register_flipbook_cpt' );

/**
 * Agrega la metabox de configuración en el editor de Flipbook
 */
function fp_add_flipbook_metaboxes() {
    add_meta_box(
        'fp_flipbook_settings',
        'Configuración del Flipbook',
        'fp_flipbook_settings_callback',
        'flipbook',
        'normal',
        'high'
    );
}
add_action( 'add_meta_boxes', 'fp_add_flipbook_metaboxes' );

/**
 * Callback para la metabox de configuración
 */
function fp_flipbook_settings_callback( $post ) {
    // Usamos nonce para seguridad
    wp_nonce_field( 'fp_flipbook_save', 'fp_flipbook_nonce' );

    // Recuperamos los valores actuales (si existen)
    $pdf_url          = get_post_meta( $post->ID, 'fp_pdf_url', true );
    $edition_type     = get_post_meta( $post->ID, 'fp_edition_type', true );
    if ( empty( $edition_type ) ) {
        $edition_type = 'estandar';
    }
    $interactive_areas = get_post_meta( $post->ID, 'fp_interactive_areas', true );
    $audio_file       = get_post_meta( $post->ID, 'fp_audio_file', true );
    $audio_autoplay   = get_post_meta( $post->ID, 'fp_audio_autoplay', true );
    ?>
    <p>
        <label for="fp_pdf_url"><strong>Archivo PDF:</strong></label><br>
        <input type="text" id="fp_pdf_url" name="fp_pdf_url" value="<?php echo esc_attr( $pdf_url ); ?>" style="width:80%;" />
        <input type="button" class="button fp_upload_pdf_button" value="Subir PDF" />
    </p>
    <p>
        <label><strong>Tipo de Edición:</strong></label><br>
        <label>
            <input type="radio" name="fp_edition_type" value="especial" <?php checked( $edition_type, 'especial' ); ?> />
            Especial
        </label>
        <label>
            <input type="radio" name="fp_edition_type" value="estandar" <?php checked( $edition_type, 'estandar' ); ?> />
            Estándar
        </label>
    </p>
    <p>
        <label for="fp_interactive_areas"><strong>Áreas Interactivas (JSON):</strong></label><br>
        <textarea id="fp_interactive_areas" name="fp_interactive_areas" rows="5" style="width:80%;"><?php echo esc_textarea( $interactive_areas ); ?></textarea>
        <br>
        <small>Ejemplo de JSON: 
        <code>
        [{"x":100, "y":200, "width":150, "height":50, "type":"linking", "value":"https://ejemplo.com"}, {"x":300, "y":400, "width":150, "height":50, "type":"youtube", "value":"dQw4w9WgXcQ"}]
        </code>
        </small>
    </p>
    <div id="fp_audio_section" style="border:1px solid #ccc; padding:10px; margin-top:15px; <?php echo ( $edition_type == 'especial' ) ? '' : 'display:none;'; ?>">
        <p><strong>Configuración de Audio (solo para Edición Especial):</strong></p>
        <p>
            <label for="fp_audio_file">Archivo MP3:</label><br>
            <input type="text" id="fp_audio_file" name="fp_audio_file" value="<?php echo esc_attr( $audio_file ); ?>" style="width:80%;" />
            <input type="button" class="button fp_upload_audio_button" value="Subir Audio" />
        </p>
        <p>
            <label>
                <input type="checkbox" name="fp_audio_autoplay" value="1" <?php checked( $audio_autoplay, '1' ); ?> />
                Reproducir automáticamente
            </label>
        </p>
    </div>
    <script>
    jQuery(document).ready(function($){
        // Muestra u oculta la sección de audio según el tipo de edición
        $('input[name="fp_edition_type"]').on('change', function(){
            if( $(this).val() == 'especial' ) {
                $('#fp_audio_section').show();
            } else {
                $('#fp_audio_section').hide();
            }
        });

        // Configuración del uploader para PDF
        $('.fp_upload_pdf_button').on('click', function(e){
            e.preventDefault();
            var frame = wp.media({
                title: 'Seleccionar PDF',
                library: { type: 'application/pdf' },
                button: { text: 'Usar este archivo' },
                multiple: false
            });
            frame.on('select', function(){
                var attachment = frame.state().get('selection').first().toJSON();
                $('#fp_pdf_url').val( attachment.url );
            });
            frame.open();
        });

        // Configuración del uploader para Audio
        $('.fp_upload_audio_button').on('click', function(e){
            e.preventDefault();
            var frame = wp.media({
                title: 'Seleccionar Audio MP3',
                library: { type: 'audio/mp3' },
                button: { text: 'Usar este archivo' },
                multiple: false
            });
            frame.on('select', function(){
                var attachment = frame.state().get('selection').first().toJSON();
                $('#fp_audio_file').val( attachment.url );
            });
            frame.open();
        });
    });
    </script>
    <?php
}

/**
 * Guarda los metadatos al guardar la entrada
 */
function fp_save_flipbook_meta( $post_id ) {
    // Verifica el nonce
    if ( ! isset( $_POST['fp_flipbook_nonce'] ) || ! wp_verify_nonce( $_POST['fp_flipbook_nonce'], 'fp_flipbook_save' ) ) {
        return $post_id;
    }
    // Evita guardar durante un autosave
    if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
        return $post_id;
    }
    // Verifica permisos
    if ( isset( $_POST['post_type'] ) && 'flipbook' === $_POST['post_type'] ) {
        if ( ! current_user_can( 'edit_post', $post_id ) ) {
            return $post_id;
        }
    }

    // Guarda el PDF
    $pdf_url = isset( $_POST['fp_pdf_url'] ) ? sanitize_text_field( $_POST['fp_pdf_url'] ) : '';
    update_post_meta( $post_id, 'fp_pdf_url', $pdf_url );

    // Guarda el tipo de edición
    $edition_type = isset( $_POST['fp_edition_type'] ) ? sanitize_text_field( $_POST['fp_edition_type'] ) : 'estandar';
    update_post_meta( $post_id, 'fp_edition_type', $edition_type );

    // Guarda las áreas interactivas (almacenadas en formato JSON)
    $interactive_areas = isset( $_POST['fp_interactive_areas'] ) ? wp_unslash( $_POST['fp_interactive_areas'] ) : '';
    update_post_meta( $post_id, 'fp_interactive_areas', $interactive_areas );

    // Para la edición "especial", se guardan los datos de audio; para "estándar" se eliminan
    if ( $edition_type == 'especial' ) {
        $audio_file = isset( $_POST['fp_audio_file'] ) ? sanitize_text_field( $_POST['fp_audio_file'] ) : '';
        update_post_meta( $post_id, 'fp_audio_file', $audio_file );

        $audio_autoplay = isset( $_POST['fp_audio_autoplay'] ) ? '1' : '0';
        update_post_meta( $post_id, 'fp_audio_autoplay', $audio_autoplay );
    } else {
        delete_post_meta( $post_id, 'fp_audio_file' );
        delete_post_meta( $post_id, 'fp_audio_autoplay' );
    }

    // Si se guarda como "especial", se asegura que sea la única entrada con ese tipo.
    if ( $edition_type == 'especial' ) {
        $args = array(
            'post_type'      => 'flipbook',
            'post_status'    => 'any',
            'meta_key'       => 'fp_edition_type',
            'meta_value'     => 'especial',
            'post__not_in'   => array( $post_id ),
            'fields'         => 'ids'
        );
        $especial_query = new WP_Query( $args );
        if ( $especial_query->have_posts() ) {
            foreach ( $especial_query->posts as $other_id ) {
                update_post_meta( $other_id, 'fp_edition_type', 'estandar' );
                // Se eliminan los metadatos de audio en la entrada anterior
                delete_post_meta( $other_id, 'fp_audio_file' );
                delete_post_meta( $other_id, 'fp_audio_autoplay' );
            }
        }
        wp_reset_postdata();
    }
}
add_action( 'save_post_flipbook', 'fp_save_flipbook_meta' );

/**
 * Encola los scripts y estilos para el administrador
 */
function fp_admin_scripts( $hook ) {
    global $post;
    if ( ( $hook == 'post-new.php' || $hook == 'post.php' ) && isset( $post ) && 'flipbook' === get_post_type( $post ) ) {
        // El Media Uploader ya viene incluido en WordPress
        wp_enqueue_media();
    }
}
add_action( 'admin_enqueue_scripts', 'fp_admin_scripts' );

/**
 * Encola los scripts y estilos para el front-end (PDF.js y Turn.js)
 */
function fp_enqueue_front_scripts() {
    if ( is_singular( 'flipbook' ) ) {
        // Encola PDF.js desde un CDN
        wp_enqueue_script( 'pdfjs', 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js', array(), '2.10.377', true );
        // Encola Turn.js desde un CDN (verifica la disponibilidad de la versión en el CDN)
        wp_enqueue_script( 'turnjs', 'https://cdnjs.cloudflare.com/ajax/libs/turn.js/4.1.0/turn.min.js', array( 'jquery' ), '4.1.0', true );

        // Encola el script personalizado para el front-end
        wp_enqueue_script( 'fp-front-script', plugin_dir_url( __FILE__ ) . 'js/fp-front.js', array( 'jquery', 'pdfjs', 'turnjs' ), '1.0', true );

        // Encola el estilo personalizado para el front-end
        wp_enqueue_style( 'fp-front-style', plugin_dir_url( __FILE__ ) . 'css/fp-front.css', array(), '1.0' );
    }
}
add_action( 'wp_enqueue_scripts', 'fp_enqueue_front_scripts' );

/**
 * Shortcode para mostrar el flipbook en el front-end.
 *
 * Uso: [flipbook]
 */
function fp_display_flipbook( $atts ) {
    global $post;
    if ( ! is_singular( 'flipbook' ) ) {
        return '';
    }
    // Recupera los metadatos
    $pdf_url           = get_post_meta( $post->ID, 'fp_pdf_url', true );
    $interactive_areas = get_post_meta( $post->ID, 'fp_interactive_areas', true );
    $audio_file        = get_post_meta( $post->ID, 'fp_audio_file', true );
    $audio_autoplay    = get_post_meta( $post->ID, 'fp_audio_autoplay', true );

    ob_start();
    ?>
    <div id="fp-flipbook-container">
        <!-- Contenedor donde se renderizará el PDF y se aplicará el efecto flip -->
        <div id="fp-pdf-viewer"></div>
        <!-- Contenedor para las áreas interactivas. Se almacenan los datos en un atributo data -->
        <div id="fp-interactive-areas" data-areas='<?php echo esc_attr( $interactive_areas ); ?>'></div>
        <?php if ( $audio_file ) : ?>
            <div id="fp-audio-container">
                <audio id="fp-audio-player" src="<?php echo esc_url( $audio_file ); ?>" <?php echo ( $audio_autoplay == '1' ) ? 'autoplay' : ''; ?> controls></audio>
            </div>
        <?php endif; ?>
    </div>
    <script>
        // Variable global con la URL del PDF, utilizada en el script front-end
        var fp_pdf_url = "<?php echo esc_url( $pdf_url ); ?>";
    </script>
    <?php
    return ob_get_clean();
}
add_shortcode( 'flipbook', 'fp_display_flipbook' );
</file>

<file path="Archivos old/archivos originales en txt/fp-front-css.txt">
/* css/fp-front.css */

#fp-flipbook-container {
    position: relative;
    margin: 0 auto;
    max-width: 800px;
}

#fp-pdf-viewer {
    position: relative;
}

/* Cada página que renderiza Turn.js */
.fp-page {
    display: inline-block;
}

/* Estilo para las áreas interactivas */
.fp-interactive-area {
    background: rgba(255, 255, 255, 0.3);
}

/* Contenedor del audio */
#fp-audio-container {
    margin-top: 20px;
    text-align: center;
}
</file>

<file path="Archivos old/archivos originales en txt/fp-front-js.txt">
fp-fribt.js

// js/fp-front.js
jQuery(document).ready(function ($) {
    // Verifica que PDF.js esté cargado y que se haya definido la variable fp_pdf_url
    if (typeof pdfjsLib !== 'undefined' && fp_pdf_url) {
        var loadingTask = pdfjsLib.getDocument(fp_pdf_url);
        loadingTask.promise.then(function (pdf) {
            var totalPages = pdf.numPages;
            var viewer = $('#fp-pdf-viewer');
            viewer.html(''); // Limpia el contenedor

            // Crea un contenedor para las páginas
            var pagesContainer = $('<div id="fp-pages-container"></div>');
            viewer.append(pagesContainer);

            // Para cada página, se crea un canvas donde se renderizará
            for (var i = 1; i <= totalPages; i++) {
                (function (pageNum) {
                    pdf.getPage(pageNum).then(function (page) {
                        var scale = 1.5;
                        var viewport = page.getViewport({ scale: scale });
                        var canvas = document.createElement('canvas');
                        canvas.className = 'fp-page-canvas';
                        canvas.width = viewport.width;
                        canvas.height = viewport.height;
                        var context = canvas.getContext('2d');
                        var renderContext = {
                            canvasContext: context,
                            viewport: viewport
                        };
                        page.render(renderContext).promise.then(function () {
                            // Cada canvas se envuelve en un contenedor (página) para Turn.js
                            var pageDiv = $('<div class="fp-page"></div>');
                            pageDiv.append(canvas);
                            $('#fp-pages-container').append(pageDiv);

                            // Una vez cargadas todas las páginas, se inicializa Turn.js
                            if ($('#fp-pages-container .fp-page').length === totalPages) {
                                $('#fp-pages-container').turn({
                                    width: viewport.width * 2,
                                    height: viewport.height,
                                    autoCenter: true
                                });
                            }
                        });
                    });
                })(i);
            }
        }, function (reason) {
            console.error("Error al cargar el PDF: ", reason);
        });
    }

    // Procesa las áreas interactivas definidas (se esperan coordenadas y propiedades en formato JSON)
    var areasData = $('#fp-interactive-areas').data('areas');
    if (areasData) {
        try {
            var areas = JSON.parse(areasData);
            // Por cada área definida, se crea un elemento superpuesto
            $.each(areas, function (index, area) {
                var areaDiv = $('<div class="fp-interactive-area"></div>');
                areaDiv.css({
                    position: 'absolute',
                    left: area.x + 'px',
                    top: area.y + 'px',
                    width: area.width + 'px',
                    height: area.height + 'px',
                    border: '2px dashed red',
                    cursor: 'pointer'
                });
                // Según el tipo de área, se asigna la acción
                if (area.type === 'linking') {
                    areaDiv.on('click', function (e) {
                        e.preventDefault();
                        // Muestra el link en un mensaje y, si se confirma, se abre en nueva pestaña
                        if (confirm("Ir a: " + area.value + "?")) {
                            window.open(area.value, '_blank');
                        }
                    });
                } else if (area.type === 'youtube') {
                    areaDiv.on('click', function (e) {
                        e.preventDefault();
                        // Abre el video de YouTube en una ventana emergente (popup)
                        var youtubeURL = "https://www.youtube.com/embed/" + area.value;
                        window.open(youtubeURL, 'YouTube Video', 'width=800,height=600');
                    });
                }
                // Se agrega el área sobre el visor (esto es una implementación básica; se puede mejorar posicionando según cada página)
                $('#fp-pdf-viewer').append(areaDiv);
            });
        } catch (err) {
            console.error("Error al interpretar el JSON de áreas interactivas: ", err);
        }
    }
});
</file>

<file path="Archivos old/archivos originales en txt/instalar.txt">
----
|Tree|
 ----

flipbook-plugin/
├── css/
│   └── fp-front.css
├── js/
│   └── fp-front.js
└── flipbook-plugin.php

 ---------------------
| Instrucciones de Uso|
 ---------------------
    Instalación:
        Crea una carpeta llamada flipbook-plugin en el directorio wp-content/plugins/ de tu instalación WordPress.
        Dentro de esa carpeta, coloca los archivos y directorios 
	(flipbook-plugin.php, js/fp-front.js, css/fp-front.css) según la estructura mostrada.

    Activación:
        Ingresa al administrador de WordPress, ve a Plugins y activa el plugin “Flipbook Plugin”.

    Creación de un Flipbook:
        En el menú de WordPress aparecerá el nuevo CPT “Flipbooks”.
        Al agregar o editar una entrada, encontrarás la metabox “Configuración del Flipbook” donde podrás:
            Subir el archivo PDF.
            Seleccionar el tipo de edición (Especial o Estándar).
            Ingresar las áreas interactivas en formato JSON (ejemplo incluido).
            Si seleccionas “Especial”, se mostrará la sección para configurar 
	    el audio (subida de archivo MP3 y opción de autoplay).
            Al guardar, si la entrada es del tipo “Especial” se garantiza que solo exista una, 
            demoviendo cualquier otra previamente guardada a “Estándar” y eliminando sus metadatos de audio.

    Visualización en el Front-end:
        Crea una página o entrada y agrega el shortcode [flipbook].
        Al visualizar la entrada (del tipo flipbook), se cargará el PDF con PDF.js, 
	se aplicará el efecto flip mediante Turn.js, se posicionarán las áreas 
	interactivas y se reproducirá el audio (si está configurado).

 -----------------
|Notas Adicionales|
 -----------------

    Versionado:
    Esta es la versión inicial del proyecto conversado el día martes 11 de febrero, por lo tanto, 
    sera la versión 1.0, al corregir los errores se debe elaborar un changelog con los cambios 
    realizados y actualizar la versión del programa. 

    Desarrollo:
    Es imperativo el desarrollo en un ambiente de pruebas como dev.contraplano.cl/testing.

    Librerías de terceros:
    En este ejemplo se utilizan PDF.js y Turn.js a través de CDN.
    Puedes modificarlos o alojarlos localmente según tus requerimientos.

    Áreas Interactivas:
    La implementación para las áreas interactivas es básica (se asume que se pasan coordenadas relativas al contenedor). 
    Para una solución más robusta podrías integrar una interfaz visual (por ejemplo, con PDF.js) para seleccionar y ajustar las áreas.

    Seguridad y Validación:
    Recuerda que este código es un punto de partida. En un entorno de producción, es recomendable añadir más validaciones, 
    sanitizaciones y manejo de errores.

    Extensiones:
    Puedes ampliar la funcionalidad del plugin, por ejemplo, creando una interfaz personalizada para editar las áreas interactivas o 
    integrando una ventana modal más sofisticada para reproducir vídeos de YouTube.
</file>

<file path="Archivos old/asd/Plugin Matias/css.css">
/* css/fp-front.css */

/* Contenedor principal de una instancia de flipbook */
.flipbook-container {
    position: relative;
    margin: 20px auto;
    /* Añadir margen */
    /* max-width: 90%; /* Hacerlo un poco responsivo */
    /* width: 800px; /* O un ancho fijo si prefieres */
    /* Podrías necesitar establecer un aspect-ratio o altura aquí */
}

/* Visor interno donde se renderiza PDF/Turn.js */
.fp-pdf-viewer {
    position: relative;
    /* background: #f0f0f0; /* Fondo mientras carga */
    overflow: hidden;
    /* Importante para Turn.js */
    margin: 0 auto;
    /* Centrar si Turn.js no lo hace */
}

/* Mensaje de carga */
.fp-loading {
    text-align: center;
    padding: 40px 20px;
    font-style: italic;
    color: #555;
}

/* Contenedor de páginas gestionado por Turn.js */
/* Turn.js puede añadir sus propios estilos aquí */
.fp-pages-container {
    /* display: none; /* Se muestra por JS */
    /* Ahora se oculta/muestra en JS */
    /* Turn.js controlará el tamaño */
}


/* Estilo para CADA página (el div que contiene el canvas) */
.fp-page {
    background-color: white;
    /* Fondo blanco para las páginas */
    /* Turn.js puede añadir 'position: absolute' */
    /* Asegurarse de que el canvas llene el div si hay problemas */
    overflow: hidden;
    /* Ocultar cualquier desbordamiento del canvas */
}

.fp-page .fp-page-canvas {
    display: block;
    /* Evitar espacio extra debajo del canvas */
    max-width: 100%;
    height: auto;
}

/* Estilos añadidos por Turn.js (ejemplos, pueden variar) */
.fp-pages-container .turn-page {
    background-color: #fff;
    background-size: 100% 100%;
}


/* Estilo para las áreas interactivas (si se implementan) */
.fp-interactive-area {
    position: absolute;
    /* Posicionadas dentro de su contenedor relativo (.fp-page) */
    background: rgba(255, 255, 0, 0.2);
    /* Amarillo semi-transparente para depuración */
    border: 1px dashed rgba(200, 0, 0, 0.6);
    cursor: pointer;
    box-sizing: border-box;
    /* Incluir borde en el tamaño */
    z-index: 10;
    /* Asegurarse de que esté sobre el canvas */
    transition: background-color 0.2s ease;
    /* Efecto hover suave */
}

.fp-interactive-area:hover {
    background: rgba(255, 255, 0, 0.4);
    border-color: rgba(200, 0, 0, 0.9);
}

/* Contenedor del reproductor de audio */
.fp-audio-container {
    margin-top: 15px;
    text-align: center;
}

.fp-audio-container audio {
    max-width: 100%;
    /* Asegurar que el control de audio sea responsivo */
    width: 400px;
    /* O un ancho específico */
}
</file>

<file path="Archivos old/asd/Plugin Matias/flipbook-plugin.php">
<?php
/**
 * Plugin Name: Flipbook Contraplano
 * Description: Visualiza Flipbooks PDF interactivos. Incluye zonas interactivas y audio en ediciones especiales.
 * Version: 1.1
 * Author: a
 */

if (!defined('ABSPATH')) exit;

// Define constants for plugin paths and URLs
define('FP_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('FP_PLUGIN_URL', plugin_dir_url(__FILE__));

// 1. Registrar tipo de contenido personalizado
function fp_register_flipbook_post_type() {
    // ... (tu código existente para register_post_type) ...
    register_post_type('flipbook', [
        'labels' => [
            'name' => 'Flipbooks',
            'singular_name' => 'Flipbook',
            'add_new' => 'Agregar nuevo',
            'add_new_item' => 'Agregar nuevo Flipbook',
            'edit_item' => 'Editar Flipbook',
            'new_item' => 'Nuevo Flipbook',
            'view_item' => 'Ver Flipbook',
            'search_items' => 'Buscar Flipbook',
            'not_found' => 'No encontrado',
        ],
        'public' => true,
        'has_archive' => true, // Puedes ponerlo en false si no quieres una página de archivo de flipbooks
        'menu_icon' => 'dashicons-book',
        'supports' => ['title'],
        'rewrite' => ['slug' => 'flipbooks'], // URL amigable
    ]);
}
add_action('init', 'fp_register_flipbook_post_type');

// 2. Agregar metabox para subir PDF y audio
function fp_add_meta_box() {
    // ... (tu código existente para add_meta_box) ...
    add_meta_box('fp_meta_box', 'Configuración del Flipbook', 'fp_meta_callback', 'flipbook', 'normal', 'high');
}
add_action('add_meta_boxes', 'fp_add_meta_box');

function fp_meta_callback($post) {
    // ... (tu código existente para fp_meta_callback) ...
    wp_nonce_field('fp_save_meta_data', 'fp_meta_nonce'); // Nonce for security

    $pdf = get_post_meta($post->ID, 'fp_pdf', true);
    $audio = get_post_meta($post->ID, 'fp_audio', true);
    // Futuro: Cargar datos de áreas interactivas aquí
    // $interactive_areas = get_post_meta($post->ID, 'fp_interactive_areas', true);

    ?>
    <p>
        <label for="fp_pdf">PDF del Flipbook:</label><br>
        <input type="text" name="fp_pdf" id="fp_pdf" value="<?php echo esc_url($pdf); ?>" style="width:80%;" readonly>
        <button type="button" class="button" id="fp_pdf_button">Subir o seleccionar PDF</button>
        <?php if ($pdf): ?>
            <p><small>URL actual: <?php echo esc_url($pdf); ?></small></p>
        <?php endif; ?>
    </p>
    <p>
        <label for="fp_audio">Audio del Flipbook (Opcional):</label><br>
        <input type="text" name="fp_audio" id="fp_audio" value="<?php echo esc_url($audio); ?>" style="width:80%;" readonly>
        <button type="button" class="button" id="fp_audio_button">Subir o seleccionar Audio</button>
         <?php if ($audio): ?>
            <p><small>URL actual: <?php echo esc_url($audio); ?></small></p>
        <?php endif; ?>
    </p>
    <!-- Futuro: Campo para áreas interactivas (ej. un textarea para JSON) -->
    <!--
    <p>
        <label for="fp_interactive_areas">Áreas Interactivas (JSON):</label><br>
        <textarea name="fp_interactive_areas" id="fp_interactive_areas" rows="5" style="width:100%;"><?php // echo esc_textarea($interactive_areas); ?></textarea>
        <small>Formato: [{"page": 1, "x": 100, "y": 150, "width": 50, "height": 30, "type": "link", "value": "https://..."}]</small>
    </p>
    -->
    <?php
}

function fp_save_meta($post_id) {
    // Security checks
    if (!isset($_POST['fp_meta_nonce']) || !wp_verify_nonce($_POST['fp_meta_nonce'], 'fp_save_meta_data')) {
        return;
    }
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }
    // ---

    if (isset($_POST['fp_pdf'])) {
        update_post_meta($post_id, 'fp_pdf', sanitize_url($_POST['fp_pdf'])); // Use sanitize_url
    } else {
         delete_post_meta($post_id, 'fp_pdf');
    }

    if (isset($_POST['fp_audio'])) {
        update_post_meta($post_id, 'fp_audio', sanitize_url($_POST['fp_audio'])); // Use sanitize_url
    } else {
        delete_post_meta($post_id, 'fp_audio');
    }

    // Futuro: Guardar áreas interactivas
    // if (isset($_POST['fp_interactive_areas'])) {
    //    update_post_meta($post_id, 'fp_interactive_areas', sanitize_textarea_field($_POST['fp_interactive_areas']));
    // } else {
    //     delete_post_meta($post_id, 'fp_interactive_areas');
    // }
}
add_action('save_post_flipbook', 'fp_save_meta'); // Hook specifically to the CPT

// 3. Encolar script para media uploader en admin
add_action('admin_enqueue_scripts', function($hook) {
    global $post_type;
    // Only load on flipbook edit pages
    if (($hook !== 'post.php' && $hook !== 'post-new.php') || 'flipbook' !== $post_type) {
        return;
    }

    wp_enqueue_media();

    // Es mejor mover este JS a un archivo separado, pero por ahora lo dejamos inline
    wp_add_inline_script('jquery', <<<JS
    jQuery(document).ready(function($) {
        function setupMediaUploader(buttonId, inputId, mediaTitle, mediaButtonText, mediaType) {
            $('#' + buttonId).on('click', function(e) {
                e.preventDefault();
                var frame = wp.media({
                    title: mediaTitle,
                    button: { text: mediaButtonText },
                    multiple: false,
                    library: mediaType ? { type: mediaType } : undefined
                });
                frame.on('select', function() {
                    var attachment = frame.state().get('selection').first().toJSON();
                    $('#' + inputId).val(attachment.url);
                    // Opcional: Mostrar la URL debajo del botón después de seleccionar
                    $('#' + inputId).next('p').remove(); // Limpiar mensaje anterior
                    $('#' + inputId).after('<p><small>URL actual: ' + attachment.url + '</small></p>');
                });
                frame.open();
            });
        }

        setupMediaUploader('fp_pdf_button', 'fp_pdf', 'Selecciona o sube un PDF', 'Usar este PDF', 'application/pdf');
        setupMediaUploader('fp_audio_button', 'fp_audio', 'Selecciona o sube un archivo de audio', 'Usar este Audio', 'audio');
    });
JS);
});

// 4. Encolar scripts y estilos para el frontend (SOLO si se usa el shortcode)
function fp_enqueue_frontend_assets() {
    // --- Dependencias ---
    // PDF.js (desde CDN de Mozilla) - Asegúrate de que la versión sea compatible
    $pdfjs_version = '2.10.377'; // Ejemplo, verifica la última versión estable
    wp_enqueue_script('pdfjs-lib', "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.min.js", [], $pdfjs_version, true);
    wp_enqueue_script('pdfjs-worker', "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.worker.min.js", [], $pdfjs_version, true);

    // Turn.js (desde CDN) - Requiere jQuery
    // Turn.js (versión 4) - Usando un CDN fiable si existe, o alojarlo localmente
    // Nota: El CDN oficial turnjs.com parece inactivo/no seguro. Usar un repo o alojar localmente es mejor.
    // Ejemplo usando cdnjs si estuviera disponible o alojado localmente:
     wp_enqueue_script('turn-js', FP_PLUGIN_URL . 'js/turn.min.js', ['jquery', 'pdfjs-lib'], '4.1.0', true); // ¡¡ASEGÚRATE DE TENER turn.min.js en tu carpeta js!!

    // --- Tus assets ---
    wp_enqueue_style('fp-front-style', FP_PLUGIN_URL . 'css/fp-front.css', [], '1.0');
    wp_enqueue_script('fp-front-script', FP_PLUGIN_URL . 'js/fp-front.js', ['jquery', 'turn-js', 'pdfjs-lib', 'pdfjs-worker'], '1.0', true); // Depende de jQuery, Turn.js y PDF.js

    // Pasar la URL del worker de PDF.js al script frontend
    wp_localize_script('fp-front-script', 'fpConfig', [
       'pdfWorkerSrc' => "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.worker.min.js"
       // 'pdfWorkerSrc' => FP_PLUGIN_URL . 'js/pdf.worker.min.js' // Si alojas pdf.worker.min.js localmente
    ]);
}

// 5. Mostrar el Flipbook en el frontend via Shortcode
function fp_flipbook_shortcode($atts) {
    $atts = shortcode_atts([
        'id' => '',
    ], $atts, 'flipbook'); // Añadir tercer parámetro para contexto

    $post_id = absint($atts['id']); // Sanitizar ID

    if (!$post_id || get_post_type($post_id) !== 'flipbook') {
        return '<p>Error: Flipbook ID inválido o no encontrado.</p>';
    }

    $pdf = get_post_meta($post_id, 'fp_pdf', true);
    $audio = get_post_meta($post_id, 'fp_audio', true);
    // Futuro: Cargar áreas interactivas
    // $interactive_areas = get_post_meta($post_id, 'fp_interactive_areas', true);
    // $interactive_areas_json = !empty($interactive_areas) ? $interactive_areas : '[]'; // Default to empty JSON array

    if (empty($pdf)) {
         return '<p>Error: No se ha configurado un PDF para este Flipbook.</p>';
    }

    // Si el shortcode se usa, encolamos los assets necesarios
    fp_enqueue_frontend_assets();

    // Generar un ID único para este contenedor de flipbook específico
    $container_id = 'flipbook-container-' . $post_id . '-' . wp_rand(100, 999); // Añadir aleatorio por si el shortcode se usa más de una vez con el mismo ID

    ob_start();
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" class="flipbook-container" data-pdf="<?php echo esc_url($pdf); ?>" <?php if ($audio): ?>data-audio="<?php echo esc_url($audio); ?>"<?php endif; ?>>
        <div id="fp-pdf-viewer-<?php echo esc_attr($post_id); ?>" class="fp-pdf-viewer">
             <div class="fp-loading">Cargando Flipbook...</div>
             <div id="fp-pages-container-<?php echo esc_attr($post_id); ?>" class="fp-pages-container" style="display:none;">
                 <!-- Las páginas (canvas) se insertarán aquí por JS -->
             </div>
             <!-- Futuro: Contenedor para áreas interactivas -->
             <!-- <div class="fp-interactive-areas" data-areas='<?php // echo esc_attr($interactive_areas_json); ?>'></div> -->
        </div>

        <?php if ($audio): ?>
        <div id="fp-audio-container-<?php echo esc_attr($post_id); ?>" class="fp-audio-container">
            <audio controls src="<?php echo esc_url($audio); ?>">
                Tu navegador no soporta el elemento de audio.
            </audio>
        </div>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('flipbook', 'fp_flipbook_shortcode');

// Limpiar metadatos si se borra el flipbook (opcional pero buena práctica)
function fp_delete_post_meta($post_id) {
    if (get_post_type($post_id) === 'flipbook') {
        delete_post_meta($post_id, 'fp_pdf');
        delete_post_meta($post_id, 'fp_audio');
        // delete_post_meta($post_id, 'fp_interactive_areas');
    }
}
add_action('delete_post', 'fp_delete_post_meta');

?>
</file>

<file path="Archivos old/asd/Plugin Matias/js.js">
// js/fp-front.js
jQuery(document).ready(function ($) {

    // Configurar la ruta del worker de PDF.js (pasada desde PHP via wp_localize_script)
    if (typeof pdfjsLib !== 'undefined' && typeof fpConfig !== 'undefined' && fpConfig.pdfWorkerSrc) {
        pdfjsLib.GlobalWorkerOptions.workerSrc = fpConfig.pdfWorkerSrc;
        // console.log('PDF.js worker source set to:', fpConfig.pdfWorkerSrc);
    } else {
        console.error('PDF.js library or worker source configuration not found.');
        return; // Salir si PDF.js no está listo
    }

    // Procesar cada instancia de flipbook en la página
    $('.flipbook-container').each(function () {
        var $container = $(this);
        var pdfUrl = $container.data('pdf');
        var containerId = $container.attr('id'); // e.g., flipbook-container-9816-123
        var postId = containerId.split('-')[2]; // Extraer el Post ID si es necesario, aunque usaremos IDs completos

        var $viewer = $container.find('.fp-pdf-viewer'); // Buscar dentro del contenedor actual
        var $pagesContainer = $container.find('.fp-pages-container');
        var $loadingMessage = $container.find('.fp-loading');
        // var $interactiveAreasContainer = $container.find('.fp-interactive-areas'); // Futuro

        if (!pdfUrl) {
            console.error('No PDF URL found for flipbook:', containerId);
            $loadingMessage.text('Error: PDF no encontrado.');
            return; // Saltar al siguiente contenedor si no hay PDF
        }

        if (typeof pdfjsLib === 'undefined') {
            console.error('PDF.js library is not loaded.');
            $loadingMessage.text('Error: Librería PDF no cargada.');
            return;
        }
        if (typeof $.fn.turn === 'undefined') {
            console.error('Turn.js library is not loaded.');
            $loadingMessage.text('Error: Librería Turn.js no cargada.');
            return;
        }

        // console.log('Initializing Flipbook:', containerId, 'with PDF:', pdfUrl);

        var loadingTask = pdfjsLib.getDocument(pdfUrl);
        loadingTask.promise.then(function (pdf) {
            // console.log('PDF loaded for', containerId);
            var totalPages = pdf.numPages;
            var pagePromises = []; // Para saber cuándo todas las páginas están listas para Turn.js

            // Limpiar contenedor de páginas (por si acaso)
            $pagesContainer.html('');

            // Procesar cada página
            for (var i = 1; i <= totalPages; i++) {
                (function (pageNum) {
                    var pagePromise = pdf.getPage(pageNum).then(function (page) {
                        var desiredWidth = $viewer.width() / 2; // Ancho deseado para una página (mitad del visor)
                        if (desiredWidth <= 0) desiredWidth = 400; // Fallback si el ancho no está definido aún

                        var viewport = page.getViewport({ scale: 1 });
                        var scale = desiredWidth / viewport.width;
                        var scaledViewport = page.getViewport({ scale: scale });

                        var canvas = document.createElement('canvas');
                        canvas.className = 'fp-page-canvas';
                        canvas.width = Math.floor(scaledViewport.width);
                        canvas.height = Math.floor(scaledViewport.height);
                        // Guardar número de página para referencia futura (ej. áreas interactivas)
                        canvas.dataset.pageNumber = pageNum;

                        var context = canvas.getContext('2d');
                        var renderContext = {
                            canvasContext: context,
                            viewport: scaledViewport
                        };

                        // Renderizar la página y devolver la promesa de renderizado
                        return page.render(renderContext).promise.then(function () {
                            // Crear el div de la página para Turn.js
                            var pageDiv = $('<div class="fp-page"></div>').css({
                                width: canvas.width + 'px',
                                height: canvas.height + 'px'
                            }).append(canvas);

                            // Almacenar temporalmente para ordenar después
                            return { pageNum: pageNum, element: pageDiv };
                        });
                    });
                    pagePromises.push(pagePromise);
                })(i);
            }

            // Esperar a que todas las páginas se rendericen
            Promise.all(pagePromises).then(function (renderedPages) {
                // console.log('All pages rendered for', containerId);

                // Ordenar las páginas por número antes de añadirlas al DOM
                renderedPages.sort(function (a, b) { return a.pageNum - b.pageNum; });

                // Añadir las páginas ordenadas al contenedor
                $.each(renderedPages, function (index, pageData) {
                    $pagesContainer.append(pageData.element);
                });

                // Obtener dimensiones de la primera página para Turn.js
                var firstPage = renderedPages[0].element;
                var pageWidth = firstPage.width();
                var pageHeight = firstPage.height();

                // Ocultar mensaje de carga y mostrar contenedor de páginas
                $loadingMessage.hide();
                $pagesContainer.show();

                // Inicializar Turn.js
                $pagesContainer.turn({
                    width: pageWidth * 2, // Ancho total para dos páginas
                    height: pageHeight,
                    autoCenter: true,
                    // display: 'double', // Mostrar dos páginas por defecto
                    // acceleration: true, // Usar aceleración por hardware si está disponible
                    // gradients: true, // Mostrar gradientes en el pliegue
                    elevation: 50, // Sombra al pasar la página
                    when: {
                        turned: function (event, page, view) {
                            // console.log('Turned to page', page, 'in view', view, 'for', containerId);
                            // Futuro: Lógica para sincronizar audio o mostrar/ocultar áreas interactivas según la página 'page' o 'view'
                        }
                    }
                });

                // Ajustar tamaño si la ventana cambia (básico)
                $(window).on('resize', function () {
                    // Podrías necesitar recalcular el tamaño y reiniciar Turn.js aquí
                    // $pagesContainer.turn('size', newWidth, newHeight);
                }).trigger('resize'); // Trigger inicial

                // Futuro: Procesar áreas interactivas después de inicializar Turn.js
                // processInteractiveAreas($container, $interactiveAreasContainer, pageWidth, pageHeight);


            }).catch(function (reason) {
                console.error("Error rendering PDF pages for " + containerId + ": ", reason);
                $loadingMessage.text('Error al renderizar las páginas del PDF.');
            });

        }, function (reason) {
            console.error("Error loading PDF for " + containerId + ": ", reason);
            $loadingMessage.text('Error al cargar el archivo PDF.');
        });

    }); // Fin de .each('.flipbook-container')


    // Futuro: Función para procesar y posicionar áreas interactivas
    /*
    function processInteractiveAreas($container, $interactiveAreasContainer, pageWidth, pageHeight) {
        var areasData = $interactiveAreasContainer.data('areas');
        if (!areasData || !Array.isArray(areasData)) return;

        var $turnPagesContainer = $container.find('.fp-pages-container'); // El elemento donde Turn.js opera

        $.each(areasData, function (index, area) {
            // Validar datos básicos del área
            if (typeof area.page !== 'number' || typeof area.x !== 'number' || typeof area.y !== 'number' || typeof area.width !== 'number' || typeof area.height !== 'number' ) {
                console.warn('Invalid interactive area data:', area);
                return; // Saltar área inválida
            }

            var areaDiv = $('<div class="fp-interactive-area"></div>');
            areaDiv.css({
                position: 'absolute',
                left: area.x + 'px', // La posición necesita ajustarse según la página en Turn.js
                top: area.y + 'px',
                width: area.width + 'px',
                height: area.height + 'px',
                border: '2px dashed rgba(255, 0, 0, 0.7)', // Más visible
                cursor: 'pointer',
                zIndex: 10 // Asegurar que esté sobre el canvas
                // background: 'rgba(255, 255, 0, 0.3)', // Fondo para depuración
            });
             areaDiv.attr('title', area.type + (area.value ? ': ' + area.value : '')); // Tooltip

            // Asignar acción basada en tipo
            if (area.type === 'link' && area.value) { // 'linking' cambiado a 'link'
                areaDiv.on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation(); // Evitar que el clic pase a Turn.js
                    if (confirm("Ir a: " + area.value + "?")) {
                        window.open(area.value, '_blank');
                    }
                });
            } else if (area.type === 'youtube' && area.value) {
                areaDiv.on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    // Usar un lightbox o un método más elegante que window.open sería mejor
                    var youtubeURL = "https://www.youtube.com/embed/" + area.value + "?autoplay=1";
                    // Ejemplo simple con window.open:
                     window.open(youtubeURL, 'YouTube Video', 'width=800,height=600,resizable=yes,scrollbars=yes');
                     // Considera usar librerías como Fancybox, Magnific Popup, etc.
                });
            }
            // Añadir más tipos aquí (ej. 'popup', 'gotoPage', etc.)

            // --- Posicionamiento complejo con Turn.js ---
            // Esto es lo más difícil. El área debe mostrarse solo cuando su página está visible
            // y posicionarse correctamente dentro de esa página (izquierda o derecha).
            // Una estrategia es añadir el div del área al div de la página correspondiente (.fp-page)
            // antes de inicializar Turn.js, o usar los eventos 'turned' de Turn.js para mostrar/ocultar/reposicionar.

            // Estrategia 1: Añadir al div de la página (más simple si funciona bien)
             var targetPageDiv = $turnPagesContainer.find('.fp-page:nth-child(' + area.page + ')');
             if(targetPageDiv.length) {
                 targetPageDiv.css('position', 'relative'); // El contenedor de la página necesita ser relativo
                 targetPageDiv.append(areaDiv);
                 // console.log('Appended interactive area to page', area.page, areaDiv);
             } else {
                 console.warn('Could not find page div for page number', area.page);
             }

             // Estrategia 2 (más compleja, usando eventos):
             // Se necesitaría almacenar las áreas y en el evento 'turned',
             // verificar qué áreas corresponden a las páginas visibles (view[0], view[1])
             // y añadirlas/posicionarlas dinámicamente sobre $turnPagesContainer.
        });
    }
    */

});
</file>

<file path="Archivos old/fp-sin-turnJS/css/fp-front.css">
/* css/fp-front.css */

/* Contenedor principal de una instancia de flipbook */
.flipbook-container {
    position: relative;
    margin: 20px auto;
    /* Añadir margen */
    /* max-width: 90%; /* Hacerlo un poco responsivo */
    /* width: 800px; /* O un ancho fijo si prefieres */
    /* Podrías necesitar establecer un aspect-ratio o altura aquí */
}

/* Visor interno donde se renderiza PDF/Turn.js */
.fp-pdf-viewer {
    position: relative;
    /* background: #f0f0f0; /* Fondo mientras carga */
    overflow: hidden;
    /* Importante para Turn.js */
    margin: 0 auto;
    /* Centrar si Turn.js no lo hace */
}

/* Mensaje de carga */
.fp-loading {
    text-align: center;
    padding: 40px 20px;
    font-style: italic;
    color: #555;
}


/* Estilo para CADA página (el div que contiene el canvas) */
.fp-page {
    background-color: white;
    /* Fondo blanco para las páginas */
    /* Turn.js puede añadir 'position: absolute' */
    /* Asegurarse de que el canvas llene el div si hay problemas */
    overflow: hidden;
    /* Ocultar cualquier desbordamiento del canvas */
}

.fp-page .fp-page-canvas {
    display: block;
    /* Evitar espacio extra debajo del canvas */
    max-width: 100%;
    height: auto;
}

/* Estilos añadidos por Turn.js (ejemplos, pueden variar) */
.fp-pages-container .turn-page {
    background-color: #fff;
    background-size: 100% 100%;
}


/* Estilo para las áreas interactivas (si se implementan) */
.fp-interactive-area {
    position: absolute;
    /* Posicionadas dentro de su contenedor relativo (.fp-page) */
    background: rgba(255, 255, 0, 0.2);
    /* Amarillo semi-transparente para depuración */
    border: 1px dashed rgba(200, 0, 0, 0.6);
    cursor: pointer;
    box-sizing: border-box;
    /* Incluir borde en el tamaño */
    z-index: 10;
    /* Asegurarse de que esté sobre el canvas */
    transition: background-color 0.2s ease;
    /* Efecto hover suave */
}

.fp-interactive-area:hover {
    background: rgba(255, 255, 0, 0.4);
    border-color: rgba(200, 0, 0, 0.9);
}

/* Contenedor del reproductor de audio */
.fp-audio-container {
    margin-top: 15px;
    text-align: center;
}

.fp-audio-container audio {
    max-width: 100%;
    /* Asegurar que el control de audio sea responsivo */
    width: 400px;
    /* O un ancho específico */
}
</file>

<file path="Archivos old/fp-sin-turnJS/flipbook-plugin.php">
<?php
/**
 * Plugin Name: Flipbook Contraplano
 * Description: Visualiza Flipbooks PDF interactivos. Incluye zonas interactivas y audio en ediciones especiales.
 * Version: 1.1
 * Author: a
 */

if (!defined('ABSPATH')) exit;

// Define constants for plugin paths and URLs
define('FP_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('FP_PLUGIN_URL', plugin_dir_url(__FILE__));

// 1. Registrar tipo de contenido personalizado
function fp_register_flipbook_post_type() {
    // ... (tu código existente para register_post_type) ...
    register_post_type('flipbook', [
        'labels' => [
            'name' => 'Flipbooks',
            'singular_name' => 'Flipbook',
            'add_new' => 'Agregar nuevo',
            'add_new_item' => 'Agregar nuevo Flipbook',
            'edit_item' => 'Editar Flipbook',
            'new_item' => 'Nuevo Flipbook',
            'view_item' => 'Ver Flipbook',
            'search_items' => 'Buscar Flipbook',
            'not_found' => 'No encontrado',
        ],
        'public' => true,
        'has_archive' => true, // Puedes ponerlo en false si no quieres una página de archivo de flipbooks
        'menu_icon' => 'dashicons-book',
        'supports' => ['title'],
        'rewrite' => ['slug' => 'flipbooks'], // URL amigable
    ]);
}
add_action('init', 'fp_register_flipbook_post_type');

// 2. Agregar metabox para subir PDF y audio
function fp_add_meta_box() {
    // ... (tu código existente para add_meta_box) ...
    add_meta_box('fp_meta_box', 'Configuración del Flipbook', 'fp_meta_callback', 'flipbook', 'normal', 'high');
}
add_action('add_meta_boxes', 'fp_add_meta_box');

function fp_meta_callback($post) {
    // ... (tu código existente para fp_meta_callback) ...
    wp_nonce_field('fp_save_meta_data', 'fp_meta_nonce'); // Nonce for security

    $pdf = get_post_meta($post->ID, 'fp_pdf', true);
    $audio = get_post_meta($post->ID, 'fp_audio', true);
    // Futuro: Cargar datos de áreas interactivas aquí
    // $interactive_areas = get_post_meta($post->ID, 'fp_interactive_areas', true);

    ?>
    <p>
        <label for="fp_pdf">PDF del Flipbook:</label><br>
        <input type="text" name="fp_pdf" id="fp_pdf" value="<?php echo esc_url($pdf); ?>" style="width:80%;" readonly>
        <button type="button" class="button" id="fp_pdf_button">Subir o seleccionar PDF</button>
        <?php if ($pdf): ?>
            <p><small>URL actual: <?php echo esc_url($pdf); ?></small></p>
        <?php endif; ?>
    </p>
    <p>
        <label for="fp_audio">Audio del Flipbook (Opcional):</label><br>
        <input type="text" name="fp_audio" id="fp_audio" value="<?php echo esc_url($audio); ?>" style="width:80%;" readonly>
        <button type="button" class="button" id="fp_audio_button">Subir o seleccionar Audio</button>
         <?php if ($audio): ?>
            <p><small>URL actual: <?php echo esc_url($audio); ?></small></p>
        <?php endif; ?>
    </p>
    <!-- Futuro: Campo para áreas interactivas (ej. un textarea para JSON) -->
    <!--
    <p>
        <label for="fp_interactive_areas">Áreas Interactivas (JSON):</label><br>
        <textarea name="fp_interactive_areas" id="fp_interactive_areas" rows="5" style="width:100%;"><?php // echo esc_textarea($interactive_areas); ?></textarea>
        <small>Formato: [{"page": 1, "x": 100, "y": 150, "width": 50, "height": 30, "type": "link", "value": "https://..."}]</small>
    </p>
    -->
    <?php
}

function fp_save_meta($post_id) {
    // Security checks
    if (!isset($_POST['fp_meta_nonce']) || !wp_verify_nonce($_POST['fp_meta_nonce'], 'fp_save_meta_data')) {
        return;
    }
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }
    if (!current_user_can('edit_post', $post_id)) {
        return;
    }
    // ---

    if (isset($_POST['fp_pdf'])) {
        update_post_meta($post_id, 'fp_pdf', sanitize_url($_POST['fp_pdf'])); // Use sanitize_url
    } else {
         delete_post_meta($post_id, 'fp_pdf');
    }

    if (isset($_POST['fp_audio'])) {
        update_post_meta($post_id, 'fp_audio', sanitize_url($_POST['fp_audio'])); // Use sanitize_url
    } else {
        delete_post_meta($post_id, 'fp_audio');
    }

    // Futuro: Guardar áreas interactivas
    // if (isset($_POST['fp_interactive_areas'])) {
    //    update_post_meta($post_id, 'fp_interactive_areas', sanitize_textarea_field($_POST['fp_interactive_areas']));
    // } else {
    //     delete_post_meta($post_id, 'fp_interactive_areas');
    // }
}
add_action('save_post_flipbook', 'fp_save_meta'); // Hook specifically to the CPT

// 3. Encolar script para media uploader en admin
add_action('admin_enqueue_scripts', function($hook) {
    global $post_type;
    // Only load on flipbook edit pages
    if (($hook !== 'post.php' && $hook !== 'post-new.php') || 'flipbook' !== $post_type) {
        return;
    }

    wp_enqueue_media();

    // Es mejor mover este JS a un archivo separado, pero por ahora lo dejamos inline
    wp_add_inline_script('jquery', <<<JS
    jQuery(document).ready(function($) {
        function setupMediaUploader(buttonId, inputId, mediaTitle, mediaButtonText, mediaType) {
            $('#' + buttonId).on('click', function(e) {
                e.preventDefault();
                var frame = wp.media({
                    title: mediaTitle,
                    button: { text: mediaButtonText },
                    multiple: false,
                    library: mediaType ? { type: mediaType } : undefined
                });
                frame.on('select', function() {
                    var attachment = frame.state().get('selection').first().toJSON();
                    $('#' + inputId).val(attachment.url);
                    // Opcional: Mostrar la URL debajo del botón después de seleccionar
                    $('#' + inputId).next('p').remove(); // Limpiar mensaje anterior
                    $('#' + inputId).after('<p><small>URL actual: ' + attachment.url + '</small></p>');
                });
                frame.open();
            });
        }

        setupMediaUploader('fp_pdf_button', 'fp_pdf', 'Selecciona o sube un PDF', 'Usar este PDF', 'application/pdf');
        setupMediaUploader('fp_audio_button', 'fp_audio', 'Selecciona o sube un archivo de audio', 'Usar este Audio', 'audio');
    });
JS);
});

// 4. Encolar scripts y estilos para el frontend (SOLO si se usa el shortcode)
function fp_enqueue_frontend_assets() {
    // --- Dependencias ---
    // PDF.js (desde CDN de Mozilla) - Asegúrate de que la versión sea compatible
    $pdfjs_version = '2.10.377'; // Ejemplo, verifica la última versión estable
    wp_enqueue_script('pdfjs-lib', "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.min.js", [], $pdfjs_version, true);
    wp_enqueue_script('pdfjs-worker', "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.worker.min.js", [], $pdfjs_version, true);

    // Turn.js (desde CDN) - Requiere jQuery
    // Turn.js (versión 4) - Usando un CDN fiable si existe, o alojarlo localmente
    // Nota: El CDN oficial turnjs.com parece inactivo/no seguro. Usar un repo o alojar localmente es mejor.
    // Ejemplo usando cdnjs si estuviera disponible o alojado localmente:
     wp_enqueue_script('turn-js', FP_PLUGIN_URL . 'js/turn.min.js', ['jquery', 'pdfjs-lib'], '4.1.0', true); // ¡¡ASEGÚRATE DE TENER turn.min.js en tu carpeta js!!

    // --- Tus assets ---
    wp_enqueue_style('fp-front-style', FP_PLUGIN_URL . 'css/fp-front.css', [], '1.0');
    wp_enqueue_script('fp-front-script', FP_PLUGIN_URL . 'js/fp-front.js', ['jquery', 'turn-js', 'pdfjs-lib', 'pdfjs-worker'], '1.0', true); // Depende de jQuery, Turn.js y PDF.js

    // Pasar la URL del worker de PDF.js al script frontend
    wp_localize_script('fp-front-script', 'fpConfig', [
       'pdfWorkerSrc' => "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/$pdfjs_version/pdf.worker.min.js"
       // 'pdfWorkerSrc' => FP_PLUGIN_URL . 'js/pdf.worker.min.js' // Si alojas pdf.worker.min.js localmente
    ]);
}

// 5. Mostrar el Flipbook en el frontend via Shortcode
function fp_flipbook_shortcode($atts) {
    $atts = shortcode_atts([
        'id' => '',
    ], $atts, 'flipbook'); // Añadir tercer parámetro para contexto

    $post_id = absint($atts['id']); // Sanitizar ID

    if (!$post_id || get_post_type($post_id) !== 'flipbook') {
        return '<p>Error: Flipbook ID inválido o no encontrado.</p>';
    }

    $pdf = get_post_meta($post_id, 'fp_pdf', true);
    $audio = get_post_meta($post_id, 'fp_audio', true);
    // Futuro: Cargar áreas interactivas
    // $interactive_areas = get_post_meta($post_id, 'fp_interactive_areas', true);
    // $interactive_areas_json = !empty($interactive_areas) ? $interactive_areas : '[]'; // Default to empty JSON array

    if (empty($pdf)) {
         return '<p>Error: No se ha configurado un PDF para este Flipbook.</p>';
    }

    // Si el shortcode se usa, encolamos los assets necesarios
    fp_enqueue_frontend_assets();

    // Generar un ID único para este contenedor de flipbook específico
    $container_id = 'flipbook-container-' . $post_id . '-' . wp_rand(100, 999); // Añadir aleatorio por si el shortcode se usa más de una vez con el mismo ID

    ob_start();
    ?>
    <div id="<?php echo esc_attr($container_id); ?>" class="flipbook-container" data-pdf="<?php echo esc_url($pdf); ?>" <?php if ($audio): ?>data-audio="<?php echo esc_url($audio); ?>"<?php endif; ?>>
        <div id="fp-pdf-viewer-<?php echo esc_attr($post_id); ?>" class="fp-pdf-viewer">
             <div class="fp-loading">Cargando Flipbook...</div>
             <div id="fp-pages-container-<?php echo esc_attr($post_id); ?>" class="fp-pages-container" style="display:none;">
                 <!-- Las páginas (canvas) se insertarán aquí por JS -->
             </div>
             <!-- Futuro: Contenedor para áreas interactivas -->
             <!-- <div class="fp-interactive-areas" data-areas='<?php // echo esc_attr($interactive_areas_json); ?>'></div> -->
        </div>

        <?php if ($audio): ?>
        <div id="fp-audio-container-<?php echo esc_attr($post_id); ?>" class="fp-audio-container">
            <audio controls src="<?php echo esc_url($audio); ?>">
                Tu navegador no soporta el elemento de audio.
            </audio>
        </div>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
}
add_shortcode('flipbook', 'fp_flipbook_shortcode');

// Limpiar metadatos si se borra el flipbook (opcional pero buena práctica)
function fp_delete_post_meta($post_id) {
    if (get_post_type($post_id) === 'flipbook') {
        delete_post_meta($post_id, 'fp_pdf');
        delete_post_meta($post_id, 'fp_audio');
        // delete_post_meta($post_id, 'fp_interactive_areas');
    }
}
add_action('delete_post', 'fp_delete_post_meta');

?>
</file>

<file path="Archivos old/fp-sin-turnJS/js/fp-front.js">
// js/fp-front.js
jQuery(document).ready(function ($) {

    // Configurar la ruta del worker de PDF.js (pasada desde PHP via wp_localize_script)
    if (typeof pdfjsLib !== 'undefined' && typeof fpConfig !== 'undefined' && fpConfig.pdfWorkerSrc) {
        pdfjsLib.GlobalWorkerOptions.workerSrc = fpConfig.pdfWorkerSrc;
        // console.log('PDF.js worker source set to:', fpConfig.pdfWorkerSrc);
    } else {
        console.error('PDF.js library or worker source configuration not found.');
        return; // Salir si PDF.js no está listo
    }

    // Procesar cada instancia de flipbook en la página
    $('.flipbook-container').each(function () {
        var $container = $(this);
        var pdfUrl = $container.data('pdf');
        var containerId = $container.attr('id'); // e.g., flipbook-container-9816-123
        var postId = containerId.split('-')[2]; // Extraer el Post ID si es necesario, aunque usaremos IDs completos

        var $viewer = $container.find('.fp-pdf-viewer'); // Buscar dentro del contenedor actual
        var $pagesContainer = $container.find('.fp-pages-container');
        var $loadingMessage = $container.find('.fp-loading');
        // var $interactiveAreasContainer = $container.find('.fp-interactive-areas'); // Futuro

        if (!pdfUrl) {
            console.error('No PDF URL found for flipbook:', containerId);
            $loadingMessage.text('Error: PDF no encontrado.');
            return; // Saltar al siguiente contenedor si no hay PDF
        }

        if (typeof pdfjsLib === 'undefined') {
            console.error('PDF.js library is not loaded.');
            $loadingMessage.text('Error: Librería PDF no cargada.');
            return;
        }
        if (typeof $.fn.turn === 'undefined') {
            console.error('Turn.js library is not loaded.');
            $loadingMessage.text('Error: Librería Turn.js no cargada.');
            return;
        }

        // console.log('Initializing Flipbook:', containerId, 'with PDF:', pdfUrl);

        var loadingTask = pdfjsLib.getDocument(pdfUrl);
        loadingTask.promise.then(function (pdf) {
            // console.log('PDF loaded for', containerId);
            var totalPages = pdf.numPages;
            var pagePromises = []; // Para saber cuándo todas las páginas están listas para Turn.js

            // Limpiar contenedor de páginas (por si acaso)
            $pagesContainer.html('');

            // Procesar cada página
            for (var i = 1; i <= totalPages; i++) {
                (function (pageNum) {
                    var pagePromise = pdf.getPage(pageNum).then(function (page) {
                        var desiredWidth = $viewer.width() / 2; // Ancho deseado para una página (mitad del visor)
                        if (desiredWidth <= 0) desiredWidth = 400; // Fallback si el ancho no está definido aún

                        var viewport = page.getViewport({ scale: 1 });
                        var scale = desiredWidth / viewport.width;
                        var scaledViewport = page.getViewport({ scale: scale });

                        var canvas = document.createElement('canvas');
                        canvas.className = 'fp-page-canvas';
                        canvas.width = Math.floor(scaledViewport.width);
                        canvas.height = Math.floor(scaledViewport.height);
                        // Guardar número de página para referencia futura (ej. áreas interactivas)
                        canvas.dataset.pageNumber = pageNum;

                        var context = canvas.getContext('2d');
                        var renderContext = {
                            canvasContext: context,
                            viewport: scaledViewport
                        };

                        // Renderizar la página y devolver la promesa de renderizado
                        return page.render(renderContext).promise.then(function () {
                            // Crear el div de la página para Turn.js
                            var pageDiv = $('<div class="fp-page"></div>').css({
                                width: canvas.width + 'px',
                                height: canvas.height + 'px'
                            }).append(canvas);

                            // Almacenar temporalmente para ordenar después
                            return { pageNum: pageNum, element: pageDiv };
                        });
                    });
                    pagePromises.push(pagePromise);
                })(i);
            }

            // Esperar a que todas las páginas se rendericen
            Promise.all(pagePromises).then(function (renderedPages) {
                // console.log('All pages rendered for', containerId);

                // Ordenar las páginas por número antes de añadirlas al DOM
                renderedPages.sort(function (a, b) { return a.pageNum - b.pageNum; });

                // Añadir las páginas ordenadas al contenedor
                $.each(renderedPages, function (index, pageData) {
                    $pagesContainer.append(pageData.element);
                });

                // Obtener dimensiones de la primera página para Turn.js
                var firstPage = renderedPages[0].element;
                var pageWidth = firstPage.width();
                var pageHeight = firstPage.height();

                // Ocultar mensaje de carga y mostrar contenedor de páginas
                $loadingMessage.hide();
                $pagesContainer.show();

                // Inicializar Turn.js
                $pagesContainer.turn({
                    width: pageWidth * 2, // Ancho total para dos páginas
                    height: pageHeight,
                    autoCenter: true,
                    // display: 'double', // Mostrar dos páginas por defecto
                    // acceleration: true, // Usar aceleración por hardware si está disponible
                    // gradients: true, // Mostrar gradientes en el pliegue
                    elevation: 50, // Sombra al pasar la página
                    when: {
                        turned: function (event, page, view) {
                            // console.log('Turned to page', page, 'in view', view, 'for', containerId);
                            // Futuro: Lógica para sincronizar audio o mostrar/ocultar áreas interactivas según la página 'page' o 'view'
                        }
                    }
                });

                // Ajustar tamaño si la ventana cambia (básico)
                $(window).on('resize', function () {
                    // Podrías necesitar recalcular el tamaño y reiniciar Turn.js aquí
                    // $pagesContainer.turn('size', newWidth, newHeight);
                }).trigger('resize'); // Trigger inicial

                // Futuro: Procesar áreas interactivas después de inicializar Turn.js
                // processInteractiveAreas($container, $interactiveAreasContainer, pageWidth, pageHeight);


            }).catch(function (reason) {
                console.error("Error rendering PDF pages for " + containerId + ": ", reason);
                $loadingMessage.text('Error al renderizar las páginas del PDF.');
            });

        }, function (reason) {
            console.error("Error loading PDF for " + containerId + ": ", reason);
            $loadingMessage.text('Error al cargar el archivo PDF.');
        });

    }); // Fin de .each('.flipbook-container')


    // Futuro: Función para procesar y posicionar áreas interactivas
    /*
    function processInteractiveAreas($container, $interactiveAreasContainer, pageWidth, pageHeight) {
        var areasData = $interactiveAreasContainer.data('areas');
        if (!areasData || !Array.isArray(areasData)) return;

        var $turnPagesContainer = $container.find('.fp-pages-container'); // El elemento donde Turn.js opera

        $.each(areasData, function (index, area) {
            // Validar datos básicos del área
            if (typeof area.page !== 'number' || typeof area.x !== 'number' || typeof area.y !== 'number' || typeof area.width !== 'number' || typeof area.height !== 'number' ) {
                console.warn('Invalid interactive area data:', area);
                return; // Saltar área inválida
            }

            var areaDiv = $('<div class="fp-interactive-area"></div>');
            areaDiv.css({
                position: 'absolute',
                left: area.x + 'px', // La posición necesita ajustarse según la página en Turn.js
                top: area.y + 'px',
                width: area.width + 'px',
                height: area.height + 'px',
                border: '2px dashed rgba(255, 0, 0, 0.7)', // Más visible
                cursor: 'pointer',
                zIndex: 10 // Asegurar que esté sobre el canvas
                // background: 'rgba(255, 255, 0, 0.3)', // Fondo para depuración
            });
             areaDiv.attr('title', area.type + (area.value ? ': ' + area.value : '')); // Tooltip

            // Asignar acción basada en tipo
            if (area.type === 'link' && area.value) { // 'linking' cambiado a 'link'
                areaDiv.on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation(); // Evitar que el clic pase a Turn.js
                    if (confirm("Ir a: " + area.value + "?")) {
                        window.open(area.value, '_blank');
                    }
                });
            } else if (area.type === 'youtube' && area.value) {
                areaDiv.on('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    // Usar un lightbox o un método más elegante que window.open sería mejor
                    var youtubeURL = "https://www.youtube.com/embed/" + area.value + "?autoplay=1";
                    // Ejemplo simple con window.open:
                     window.open(youtubeURL, 'YouTube Video', 'width=800,height=600,resizable=yes,scrollbars=yes');
                     // Considera usar librerías como Fancybox, Magnific Popup, etc.
                });
            }
            // Añadir más tipos aquí (ej. 'popup', 'gotoPage', etc.)

            // --- Posicionamiento complejo con Turn.js ---
            // Esto es lo más difícil. El área debe mostrarse solo cuando su página está visible
            // y posicionarse correctamente dentro de esa página (izquierda o derecha).
            // Una estrategia es añadir el div del área al div de la página correspondiente (.fp-page)
            // antes de inicializar Turn.js, o usar los eventos 'turned' de Turn.js para mostrar/ocultar/reposicionar.

            // Estrategia 1: Añadir al div de la página (más simple si funciona bien)
             var targetPageDiv = $turnPagesContainer.find('.fp-page:nth-child(' + area.page + ')');
             if(targetPageDiv.length) {
                 targetPageDiv.css('position', 'relative'); // El contenedor de la página necesita ser relativo
                 targetPageDiv.append(areaDiv);
                 // console.log('Appended interactive area to page', area.page, areaDiv);
             } else {
                 console.warn('Could not find page div for page number', area.page);
             }

             // Estrategia 2 (más compleja, usando eventos):
             // Se necesitaría almacenar las áreas y en el evento 'turned',
             // verificar qué áreas corresponden a las páginas visibles (view[0], view[1])
             // y añadirlas/posicionarlas dinámicamente sobre $turnPagesContainer.
        });
    }
    */

});
</file>

<file path="flipbook-contraplano/changelog.md">

</file>

<file path="flipbook-contraplano/instalar.txt">
----
|Tree|
 ----

flipbook-plugin/
├── css/
│   └── fp-front.css
├── js/
│   └── fp-front.js
└── flipbook-plugin.php

 ---------------------
| Instrucciones de Uso|
 ---------------------
    Instalación:
        Crea una carpeta llamada flipbook-plugin en el directorio wp-content/plugins/ de tu instalación WordPress.
        Dentro de esa carpeta, coloca los archivos y directorios 
	(flipbook-plugin.php, js/fp-front.js, css/fp-front.css) según la estructura mostrada.

    Activación:
        Ingresa al administrador de WordPress, ve a Plugins y activa el plugin “Flipbook Plugin”.

    Creación de un Flipbook:
        En el menú de WordPress aparecerá el nuevo CPT “Flipbooks”.
        Al agregar o editar una entrada, encontrarás la metabox “Configuración del Flipbook” donde podrás:
            Subir el archivo PDF.
            Seleccionar el tipo de edición (Especial o Estándar).
            Ingresar las áreas interactivas en formato JSON (ejemplo incluido).
            Si seleccionas “Especial”, se mostrará la sección para configurar 
	    el audio (subida de archivo MP3 y opción de autoplay).
            Al guardar, si la entrada es del tipo “Especial” se garantiza que solo exista una, 
            demoviendo cualquier otra previamente guardada a “Estándar” y eliminando sus metadatos de audio.

    Visualización en el Front-end:
        Crea una página o entrada y agrega el shortcode [flipbook].
        Al visualizar la entrada (del tipo flipbook), se cargará el PDF con PDF.js, 
	se aplicará el efecto flip mediante Turn.js, se posicionarán las áreas 
	interactivas y se reproducirá el audio (si está configurado).

 -----------------
|Notas Adicionales|
 -----------------

    Versionado:
    Esta es la versión inicial del proyecto conversado el día martes 11 de febrero, por lo tanto, 
    sera la versión 1.0, al corregir los errores se debe elaborar un changelog con los cambios 
    realizados y actualizar la versión del programa. 

    Desarrollo:
    Es imperativo el desarrollo en un ambiente de pruebas como dev.contraplano.cl/testing.

    Librerías de terceros:
    En este ejemplo se utilizan PDF.js y Turn.js a través de CDN.
    Puedes modificarlos o alojarlos localmente según tus requerimientos.

    Áreas Interactivas:
    La implementación para las áreas interactivas es básica (se asume que se pasan coordenadas relativas al contenedor). 
    Para una solución más robusta podrías integrar una interfaz visual (por ejemplo, con PDF.js) para seleccionar y ajustar las áreas.

    Seguridad y Validación:
    Recuerda que este código es un punto de partida. En un entorno de producción, es recomendable añadir más validaciones, 
    sanitizaciones y manejo de errores.

    Extensiones:
    Puedes ampliar la funcionalidad del plugin, por ejemplo, creando una interfaz personalizada para editar las áreas interactivas o 
    integrando una ventana modal más sofisticada para reproducir vídeos de YouTube.
</file>

<file path="flipbook-contraplano/install nuevo.txt">
# GUÍA DE INSTALACIÓN Y USO: FLIPBOOK CONTRAPLANO

## ESTRUCTURA DEL PLUGIN
```
flipbook-contraplano/
├── css/
│   ├── css
│   └── css.. etc
├── js/
│   ├── js etc
│   └── js etc
└── flipbook-plugin.php
```

## INSTALACIÓN

1. **Preparación del archivo ZIP**:
   - Descarga el archivo ZIP del plugin Flipbook Contraplano
   - Asegúrate de que la estructura de carpetas sea exactamente como se muestra arriba

2. **Instalación en WordPress**:
   - Inicia sesión en el panel de administración de WordPress
   - Navega a "Plugins" > "Añadir nuevo"
   - Haz clic en "Subir plugin"
   - Selecciona el archivo ZIP del plugin y haz clic en "Instalar ahora"
   - Una vez completada la instalación, haz clic en "Activar plugin"

3. **Instalación manual (alternativa)**:
   - Descomprime el archivo ZIP
   - Sube la carpeta `flipbook-contraplano` al directorio `/wp-content/plugins/` de tu instalación WordPress
   - Activa el plugin desde el panel de administración de WordPress

## USO DEL PLUGIN

### 1. CREAR UN FLIPBOOK

1. **Acceder al menú de Flipbooks**:
   - En el panel de administración de WordPress, verás un nuevo menú llamado "Flipbooks"
   - Haz clic en "Añadir nuevo" para crear un flipbook

2. **Configurar el Flipbook**:
   - **Título**: Asigna un título descriptivo a tu flipbook
   - **PDF del Flipbook**: 
     - Haz clic en "Subir PDF" para seleccionar o subir un archivo PDF
     - El PDF se mostrará como un flipbook interactivo
   - **Audios por página**:
     - Puedes añadir archivos de audio para cada página del flipbook
     - El primer audio corresponde a la página 1, el segundo a la página 2, etc.
     - Haz clic en "+ Agregar Audio" para añadir más audios

3. **Áreas Interactivas**:
   - En la pestaña "Áreas Interactivas", puedes definir áreas clickeables en el PDF
   - Estas áreas pueden enlazar a URLs externas, navegar a otras páginas del mismo PDF o reproducir videos de YouTube

4. **Acciones de InDesign**:
   - En la pestaña "Acciones de InDesign", puedes importar acciones definidas en Adobe InDesign
   - Estas acciones pueden configurarse para navegar entre páginas o abrir enlaces

5. **Guardar el Flipbook**:
   - Haz clic en "Publicar" o "Actualizar" para guardar tu flipbook

### 2. INSERTAR EL FLIPBOOK EN UNA PÁGINA O ENTRADA

1. **Usando el botón de inserción**:
   - Edita la página o entrada donde deseas insertar el flipbook
   - Haz clic en el botón "Insertar Flipbook" (icono de libro) en la barra de herramientas
   - Selecciona el flipbook que deseas insertar de la lista
   - El shortcode se insertará automáticamente en el formato `[flipbook=ID]`

2. **Usando el shortcode manualmente**:
   - Puedes insertar el shortcode `[flipbook=ID]` directamente en el editor
   - Reemplaza "ID" con el ID del flipbook que deseas mostrar
   - El ID se puede encontrar en la URL cuando editas el flipbook (por ejemplo, `post.php?post=123&action=edit`)

### 3. PERSONALIZACIÓN

1. **Configuración visual**:
   - Puedes personalizar el aspecto del flipbook desde el panel de administración
   - Selecciona un tema (claro/oscuro) y un color de acento

2. **Parámetros del shortcode**:
   - El shortcode acepta varios parámetros para personalizar la visualización:
     - `[flipbook=ID width="100%" height="600px" view_mode="double"]`
     - `width`: Ancho del flipbook (por defecto: 100%)
     - `height`: Alto del flipbook (por defecto: 600px)
     - `view_mode`: Modo de visualización ("single" o "double", por defecto: "double")

## SOLUCIÓN DE PROBLEMAS

1. **El PDF no se muestra**:
   - Verifica que el PDF se haya subido correctamente
   - Asegúrate de que el formato del shortcode sea correcto: `[flipbook=ID]` (sin comillas)
   - Comprueba que el ID del flipbook sea correcto

2. **Los audios no se reproducen**:
   - Verifica que los archivos de audio se hayan subido correctamente
   - Asegúrate de que los formatos de audio sean compatibles con el navegador (MP3, WAV, OGG)

3. **Las áreas interactivas no funcionan**:
   - Verifica que las coordenadas de las áreas interactivas sean correctas
   - Asegúrate de que los enlaces o acciones estén configurados correctamente

## RECOMENDACIONES

1. **Optimización de PDFs**:
   - Para un mejor rendimiento, optimiza tus PDFs antes de subirlos
   - Reduce el tamaño de las imágenes dentro del PDF
   - Considera dividir PDFs muy grandes en varios flipbooks más pequeños

2. **Compatibilidad de navegadores**:
   - El plugin funciona mejor en navegadores modernos como Chrome, Firefox, Safari y Edge
   - Para una experiencia óptima, recomienda a tus usuarios utilizar estos navegadores

3. **Rendimiento**:
   - Los flipbooks con muchos audios o áreas interactivas pueden cargar más lentamente
   - Considera limitar el número de elementos interactivos para mejorar el rendimiento

## SOPORTE Y ACTUALIZACIONES

Para obtener soporte o reportar problemas:
- Visita nuestro sitio web: [URL del sitio]
- Envía un correo electrónico a: [correo de soporte]
- Consulta nuestra documentación en línea: [URL de la documentación]

---

© 2024 Flipbook Contraplano. Todos los derechos reservados.
</file>

<file path="flipbook-contraplano/js/fp-custom-zoom.js">
/**
 * Custom Zoom Functionality for Flipbook
 */

document.addEventListener('DOMContentLoaded', function() {
    const containers = document.querySelectorAll('.flipbook-container');
    
    containers.forEach(container => {
        const pdfViewer = container.querySelector('.fp-pdf-viewer');
        
        if (!pdfViewer) return;
        
        let currentZoom = 1;
        const MIN_ZOOM = 0.5;
        const MAX_ZOOM = 3;
        const ZOOM_STEP = 0.1;
        
        // Mantener el seguimiento del estado del zoom
        let isZoomed = false;
        
        // Función para aplicar zoom
        function applyZoom(newZoom, originX, originY) {
            // Limitar zoom a los valores mínimos y máximos
            newZoom = Math.min(Math.max(newZoom, MIN_ZOOM), MAX_ZOOM);
            
            // Si no hay cambio, no hacer nada
            if (newZoom === currentZoom) return;
            
            // Determinar si estamos haciendo zoom o reducción
            const zoomingIn = newZoom > currentZoom;
            
            // Actualizar clases para cambiar el cursor
            if (newZoom > 1) {
                pdfViewer.classList.add('fp-zooming');
                if (zoomingIn) {
                    pdfViewer.classList.remove('fp-zooming-out');
                } else {
                    pdfViewer.classList.add('fp-zooming-out');
                }
            } else {
                pdfViewer.classList.remove('fp-zooming', 'fp-zooming-out');
            }
            
            // Aplicar el nuevo zoom
            pdfViewer.style.transform = `scale(${newZoom})`;
            currentZoom = newZoom;
            
            // Actualizar el estado del zoom
            isZoomed = newZoom > 1;
            
            // Actualizar el valor del slider de zoom si existe
            const zoomSlider = container.querySelector('.fp-zoom-slider');
            if (zoomSlider) {
                zoomSlider.value = newZoom * 100;
                
                // Disparar evento de cambio para actualizar UI
                const event = new Event('input');
                zoomSlider.dispatchEvent(event);
            }
        }
        
        // Gestionar eventos de la rueda del ratón
        pdfViewer.addEventListener('wheel', function(e) {
            // Solo interceptar si la tecla Ctrl está presionada o si ya estamos en un estado de zoom
            if (e.ctrlKey || isZoomed) {
                e.preventDefault(); // Evitar el zoom del navegador
                
                const delta = e.deltaY > 0 ? -1 : 1;
                const newZoom = currentZoom + (delta * ZOOM_STEP);
                
                // Calcular el punto de origen del zoom (posición del cursor)
                const rect = pdfViewer.getBoundingClientRect();
                const x = (e.clientX - rect.left) / currentZoom;
                const y = (e.clientY - rect.top) / currentZoom;
                
                applyZoom(newZoom, x, y);
            }
        }, { passive: false });
        
        // Resetear zoom con doble clic
        pdfViewer.addEventListener('dblclick', function() {
            if (isZoomed) {
                applyZoom(1, 0, 0);
            }
        });
        
        // Conectar con controles existentes
        const zoomInBtn = container.querySelector('.fp-zoom-in');
        const zoomOutBtn = container.querySelector('.fp-zoom-out');
        const zoomSlider = container.querySelector('.fp-zoom-slider');
        
        if (zoomInBtn) {
            zoomInBtn.addEventListener('click', () => {
                applyZoom(currentZoom + ZOOM_STEP, 0, 0);
            });
        }
        
        if (zoomOutBtn) {
            zoomOutBtn.addEventListener('click', () => {
                applyZoom(currentZoom - ZOOM_STEP, 0, 0);
            });
        }
        
        if (zoomSlider) {
            zoomSlider.addEventListener('input', () => {
                const zoomValue = parseFloat(zoomSlider.value) / 100;
                if (zoomValue !== currentZoom) {
                    applyZoom(zoomValue, 0, 0);
                }
            });
        }
        
        // Escuchar eventos de pantalla completa para ajustar el zoom
        document.addEventListener('fullscreenchange', resetZoomOnFullscreenChange);
        document.addEventListener('webkitfullscreenchange', resetZoomOnFullscreenChange);
        document.addEventListener('mozfullscreenchange', resetZoomOnFullscreenChange);
        document.addEventListener('MSFullscreenChange', resetZoomOnFullscreenChange);
        
        function resetZoomOnFullscreenChange() {
            if (document.fullscreenElement || 
                document.webkitFullscreenElement || 
                document.mozFullScreenElement ||
                document.msFullscreenElement) {
                // Si entramos en pantalla completa, resetear el zoom
                applyZoom(1, 0, 0);
            }
        }
    });
    
    // Prevenir el comportamiento de zoom predeterminado en todo el documento cuando Ctrl está presionado
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.key === '0') {
            // Interceptar Ctrl+0 (reseteo de zoom del navegador)
            e.preventDefault();
        }
    });
});
</file>

<file path="flipbook-contraplano/js/fp-gutenberg-button.js">
/**
 * Añadir botón de insertar Flipbook en el editor Gutenberg
 */
(function(wp) {
    const { registerPlugin } = wp.plugins;
    const { PluginMoreMenuItem } = wp.editPost;
    const { Modal, Button, SelectControl } = wp.components;
    const { useState } = wp.element;
    const { insertBlock, createBlock } = wp.blocks;
    const { useDispatch, useSelect } = wp.data;

    const FlipbookButton = () => {
        const [isOpen, setIsOpen] = useState(false);
        const [selectedFlipbook, setSelectedFlipbook] = useState('');
        const { insertBlocks } = useDispatch('core/block-editor');
        const { getSelectedBlock } = useSelect(select => select('core/block-editor'));

        // Preparar opciones para el selector
        const flipbookOptions = [];
        if (fpGutenbergData && fpGutenbergData.flipbooks) {
            flipbookOptions.push({ label: 'Seleccione un flipbook...', value: '' });
            fpGutenbergData.flipbooks.forEach(flipbook => {
                flipbookOptions.push({
                    label: flipbook.title,
                    value: flipbook.id.toString()
                });
            });
        }

        // Función para insertar el shortcode en el editor
        const insertFlipbookShortcode = () => {
            if (!selectedFlipbook) {
                // Si no hay flipbook seleccionado, mostrar alerta
                return;
            }

            // Crear bloque de shortcode
            const shortcodeBlock = createBlock('core/shortcode', {
                text: `[flipbook id=${selectedFlipbook}]`
            });

            // Insertar el bloque en el editor
            insertBlocks(shortcodeBlock);
            
            // Cerrar el modal
            setIsOpen(false);
        };

        return (
            <>
                <PluginMoreMenuItem
                    icon="book"
                    onClick={() => setIsOpen(true)}
                >
                    Insertar Flipbook
                </PluginMoreMenuItem>

                {isOpen && (
                    <Modal
                        title="Seleccionar un Flipbook"
                        onRequestClose={() => setIsOpen(false)}
                    >
                        <div style={{ margin: '20px 0' }}>
                            <SelectControl
                                label="Seleccione el Flipbook que desea insertar:"
                                value={selectedFlipbook}
                                options={flipbookOptions}
                                onChange={(value) => setSelectedFlipbook(value)}
                            />
                        </div>

                        <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
                            <Button
                                isSecondary
                                onClick={() => setIsOpen(false)}
                                style={{ marginRight: '10px' }}
                            >
                                Cancelar
                            </Button>

                            <Button
                                isPrimary
                                onClick={insertFlipbookShortcode}
                                disabled={!selectedFlipbook}
                            >
                                Insertar
                            </Button>
                        </div>
                    </Modal>
                )}
            </>
        );
    };

    registerPlugin('flipbook-contraplano-button', {
        render: FlipbookButton
    });
})(window.wp);
</file>

<file path="flipbook-contraplano/js/fp-insert-flipbook.js">
/**
 * Script para añadir un botón "Insertar Flipbook" en el editor clásico de WordPress
 */
(function($) {
    'use strict';
    
    // Cuando el DOM esté listo
    $(document).ready(function() {
        // Verificar si tenemos datos de flipbooks
        if (!fpInsertData || !fpInsertData.flipbooks) {
            console.error('No se pudieron cargar los datos de flipbooks');
            return;
        }
        
        // Crear el botón
        const $insertButton = $('<button></button>', {
            'id': 'insert-flipbook-button',
            'class': 'button',
            'text': fpInsertData.button_text || 'Insertar Flipbook'
        }).css({
            'margin-left': '10px'
        });
        
        // Añadir el botón después del "Agregar medios"
        $('#wp-content-media-buttons').append($insertButton);
        
        // Crear el modal
        const $modalOverlay = $('<div></div>', {
            'id': 'fp-modal-overlay',
            'class': 'fp-modal-overlay'
        }).css({
            'display': 'none',
            'position': 'fixed',
            'z-index': '100050', // Mayor que el admin bar de WordPress
            'top': '0',
            'left': '0',
            'right': '0',
            'bottom': '0',
            'background': 'rgba(0,0,0,0.7)',
            'overflow': 'auto',
            'padding': '20px'
        });
        
        const $modal = $('<div></div>', {
            'id': 'fp-modal',
            'class': 'fp-modal'
        }).css({
            'background': '#fff',
            'position': 'relative',
            'margin': '5% auto',
            'padding': '20px',
            'width': '50%',
            'max-width': '500px',
            'border-radius': '4px',
            'box-shadow': '0 3px 6px rgba(0,0,0,0.3)'
        });
        
        const $modalHeader = $('<div></div>', {
            'class': 'fp-modal-header'
        }).css({
            'border-bottom': '1px solid #eee',
            'padding-bottom': '10px',
            'margin-bottom': '15px'
        });
        
        $modalHeader.append(
            $('<h3></h3>', {
                'text': fpInsertData.modal_title || 'Seleccionar un Flipbook'
            })
        );
        
        const $modalBody = $('<div></div>', {
            'class': 'fp-modal-body'
        }).css({
            'margin-bottom': '15px'
        });
        
        // Crear select para elegir flipbook
        const $select = $('<select></select>', {
            'id': 'fp-select-flipbook',
            'class': 'widefat'
        }).css({
            'width': '100%'
        });
        
        // Añadir opciones al select
        if (fpInsertData.flipbooks.length === 0) {
            $select.append(
                $('<option></option>', {
                    'text': 'No hay flipbooks disponibles',
                    'value': ''
                })
            );
        } else {
            $select.append(
                $('<option></option>', {
                    'text': 'Seleccione un flipbook...',
                    'value': ''
                })
            );
            
            fpInsertData.flipbooks.forEach(function(flipbook) {
                $select.append(
                    $('<option></option>', {
                        'text': flipbook.title,
                        'value': flipbook.id
                    })
                );
            });
        }
        
        $modalBody.append(
            $('<p>Por favor, seleccione un Flipbook de la lista:</p>'),
            $select
        );
        
        const $modalFooter = $('<div></div>', {
            'class': 'fp-modal-footer'
        }).css({
            'text-align': 'right',
            'border-top': '1px solid #eee',
            'padding-top': '10px'
        });
        
        const $cancelButton = $('<button></button>', {
            'type': 'button',
            'class': 'button',
            'text': fpInsertData.cancel_button || 'Cancelar'
        });
        
        const $insertModalButton = $('<button></button>', {
            'type': 'button',
            'class': 'button button-primary',
            'text': fpInsertData.modal_button || 'Insertar'
        });
        
        $modalFooter.append($cancelButton, ' ', $insertModalButton);
        
        $modal.append($modalHeader, $modalBody, $modalFooter);
        $modalOverlay.append($modal);
        $('body').append($modalOverlay);
        
        // Función para cerrar el modal
        function closeModal() {
            $modalOverlay.hide();
        }
        
        // Evento para abrir el modal
        $insertButton.on('click', function(e) {
            e.preventDefault();
            $modalOverlay.show();
        });
        
        // Eventos para cerrar el modal
        $cancelButton.on('click', closeModal);
        $modalOverlay.on('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
        
        // Evento para insertar el shortcode
        $insertModalButton.on('click', function() {
            const flipbookId = $('#fp-select-flipbook').val();
            
            if (!flipbookId) {
                alert('Por favor, seleccione un Flipbook');
                return;
            }
            
            const shortcode = '[flipbook id=' + flipbookId + ']';
            
            // Insertar en el editor (funciona con TinyMCE y editor de texto)
            if (typeof window.tinyMCE !== 'undefined' && window.tinyMCE.activeEditor && !window.tinyMCE.activeEditor.isHidden()) {
                window.tinyMCE.activeEditor.execCommand('mceInsertContent', false, shortcode);
            } else {
                const $textarea = $('#content');
                const currentContent = $textarea.val();
                const caretPos = $textarea[0].selectionStart;
                
                $textarea.val(
                    currentContent.substring(0, caretPos) +
                    shortcode +
                    currentContent.substring(caretPos)
                );
            }
            
            closeModal();
        });
    });
})(jQuery);
</file>

<file path="Flujo de uso plugin.txt">
Para desarrollar el plugin y testear: https://dev.contraplano.cl/testing/wp-admin/post.php?post=9866&action=edit

Definiciones:

    Series: Revistas mensuales, aquí se debe subir el pdf.
    Plugin: Se debe instalar y saldría en el sidebar izquierdo.
    Editor de página: Se llamaría el shortcode (Ej: [flipbook]) para luego utilizarlo visualmente en https://dev.contraplano.cl/testing/?page_id=9816


1) El plugin se sube en:
    https://dev.contraplano.cl/testing/wp-admin/plugin-install.php

2) Series:
    https://dev.contraplano.cl/testing/series/test/

3) Pagina (editor) de testeo con Flipbook:
        https://dev.contraplano.cl/testing/wp-admin/post.php?post=9816&action=edit&classic-editor
    Pagina dev:
        https://dev.contraplano.cl/testing/?page_id=9816&preview=true 









<system_prompt>
YOU ARE A WORLD-CLASS WORDPRESS PLUGIN DEVELOPER WITH AN IQ OF 180, RENOWNED FOR YOUR EXPERTISE IN CREATING ADVANCED AND HIGHLY EFFICIENT PLUGINS. YOUR TASK IS TO DEVELOP A HIGHLY OPTIMIZED WORDPRESS FLIPBOOK PLUGIN BASED ON THE FOLLOWING REQUIREMENTS.

### PLUGIN OVERVIEW ###

THIS WORDPRESS PLUGIN MUST ENABLE USERS TO UPLOAD AND VIEW PDF FILES AS INTERACTIVE FLIPBOOKS. THE FLIPBOOK MUST INCLUDE A PAGE-TURNING ANIMATION, PDF LINKING, YOUTUBE VIDEO REDIRECTION, AUDIO EMBEDDING, AND EDIT MANAGEMENT FUNCTIONALITY.

---

### FOLDER STRUCTURE ###
- The plugin follows this directory structure:
  ├── flipbook-contraplano/
  │   ├── css/
  │   │   └── fp-front.css
  │   ├── flipbook-plugin.php
  │   └── js/
  │       └── fp-front.js

ENSURE THAT ALL CSS AND JAVASCRIPT FUNCTIONALITIES ARE SEPARATED INTO THEIR RESPECTIVE FILES. PROVIDE THE FINAL NAMES OF EACH FILE IN YOUR IMPLEMENTATION.

---

### CORE FEATURES ###

#### 1. **PDF UPLOAD & OVERWRITE FUNCTIONALITY**
- The plugin should allow users to upload a new PDF edition.
- When a new PDF is uploaded, it automatically replaces the previous one.
- Maintain compatibility with **Adobe InDesign page redirection features**.

#### 2. **PAGE-TURNING ANIMATION**
- Implement smooth, real-life page-turning animations.
- Include left and right navigation arrows for seamless navigation.

#### 3. **IN-PDF INTERACTIVE OPTIONS**

##### A. **LINKING FEATURE**
- Users should be able to select an area within any PDF page and embed a link.
- When clicked, the selected area should:
  - **Initially appear in blue.**
  - **Open the link in a new tab upon clicking.**

##### B. **YOUTUBE VIDEO REDIRECTION**
- Users must be able to insert a **YouTube video link** into any page.
- Clicking the embedded YouTube link should open the video in a new tab.

#### 4. **AUDIO EMBEDDING**
- Users can add an **SVG "Play Button" audio icon** to any PDF page.
- Users can upload and attach **MP3 audio files**.
- An option to enable **Autoplay** should be available through a **checkbox**.

#### 5. **EDIT MANAGEMENT SYSTEM**

- There are two types of edits:
  1. **Special Edit**: Contains audio files.
  2. **Normal Edit**: Contains no audio files.

- When a **new Special Edit** is uploaded:
  - The **previous Special Edit becomes a Normal Edit**.
  - All audio files and icons from the previous Special Edit are **deleted**.
  - The new Special Edit **retains only its own audio files**.

---

### DEVELOPMENT REQUIREMENTS ###
- FOLLOW BEST PRACTICES FOR WORDPRESS PLUGIN DEVELOPMENT.
- ENSURE THAT ALL **CSS STYLING** AND **JAVASCRIPT FUNCTIONALITIES** ARE SEPARATED INTO THEIR RESPECTIVE FILES.
- WRITE **CLEAN, EFFICIENT, AND WELL-DOCUMENTED CODE**.
- ENSURE **CROSS-BROWSER COMPATIBILITY**.
- OPTIMIZE FOR **PERFORMANCE AND MINIMAL SERVER LOAD**.
- IMPLEMENT A **SECURE UPLOAD SYSTEM** FOR PDF AND AUDIO FILES.

---

### WHAT NOT TO DO ###
- **DO NOT USE INLINE CSS OR JAVASCRIPT.** ENSURE ALL STYLING AND SCRIPTS ARE SEPARATE.
- **DO NOT ALLOW MULTIPLE FILE UPLOADS.** ONLY ONE PDF EDITION SHOULD EXIST AT A TIME.
- **DO NOT IGNORE SECURITY MEASURES.** ENSURE SAFE FILE UPLOAD HANDLING.
- **DO NOT CREATE UNOPTIMIZED OR LAGGY ANIMATIONS.** ALL INTERACTIONS MUST BE SMOOTH.
- **DO NOT USE THIRD-PARTY LIBRARIES UNLESS STRICTLY NECESSARY.** MINIMIZE DEPENDENCIES TO ENSURE PERFORMANCE AND SECURITY.

---

### FINAL NOTES ###
- CLEARLY DOCUMENT THE FUNCTIONALITY OF EACH CSS AND JAVASCRIPT FILE.
- AFTER IMPLEMENTATION, PROVIDE A FINAL LIST OF FILE NAMES USED.
- MAINTAIN CODE QUALITY AND ENSURE WORDPRESS STANDARD COMPLIANCE.

</system_prompt>
</file>

<file path="todo.md">
* **Objetivo General:**

  * [ ] Desarrollar un plugin para WordPress que reemplace la soluciรณn de Issuu y permita mostrar PDFs como flipbooks interactivos.
* **Funcionalidades Clave a Replicar:**

  * [X] Mostrar PDF en formato flipbook (efecto pasar hoja) 
  * [X] Incluir navegaciรณn con flechas para avanzar y retroceder pรกginas.
  * [ ] Soportar vinculaciรณn con acciones definidas. (Arreglar)
  * [X] Permitir la selecciรณn de รกreas de texto (text areas) en el PDF (Arreglar).
  * [X] Asignar enlaces URL a las รกreas de texto para redirigir a otras pรกginas (Arreglar).
  * [X] Asignar videos de YouTube a las รกreas de texto, que se reproduzcan en pop-up dentro del flipbook. (Arreglar)
* **Funcionalidad Adicional โ�� Reproducciรณn de Audio:**

  * [X] Incorporar un icono (preferiblemente SVG y configurable en color, se sugiere rojo) en รกreas especรญficas del PDF. (Arreglar)
  * [X] Configurar el icono para que, al hacer clic, se reproduzca un archivo de audio MP3. (Arreglar).
  * [X] Permitir la carga (upload) de archivos MP3 desde el panel del plugin.

* **Panel de Administraciรณn / Editor del Plugin:**

  * [X] Interfaz para subir el archivo PDF.
  * [X] Herramienta de ediciรณn del PDF para agregar y configurar capas interactivas (text areas, enlaces, videos, audio) (Arreglar).
  * [X] Gestiรณn de archivos de audio (subida y alojamiento).
* **Integraciรณn con WordPress:**

  * [X] Implementar el flipbook de forma que se pueda insertar fรกcilmente en pรกginas o posts (ejemplo: mediante un shortcode o widget).
  * [X] Incluir el cรณdigo (JS y PHP) del plugin en su propio directorio.
* **Personalizaciรณn y Configuraciรณn Visual:**

  * [ ] Permitir seleccionar un color de fondo para รกreas fuera del flipbook, adaptรกndose a modos claro/oscuro.
</file>

<file path="flipbook-contraplano/js/fp-admin.js">
/**
 * JavaScript para la administración del plugin Flipbook Contraplano
 */
(function ($) {
    'use strict';

    // Objeto para manejar la administración del flipbook
    var FlipbookAdmin = {
        // Variables de configuración
        config: {
            pdfScale: 1.0,
            currentPage: 1,
            isSelecting: false,
            editingAreaIndex: -1
        },

        // Inicializar
        init: function () {
            this.setupTabs();
            this.setupPdfUploader();
            this.setupAudioUploader();
            this.setupAreasEditor();
            this.setupAreasList();
            this.setupThemeColorPicker();
            this.setupInDesignImport();
        },

        // Configurar tabs 
        setupTabs: function () {
            $('.fp-tabs-nav a').on('click', function (e) {
                e.preventDefault();
                const tabId = $(this).attr('href');

                $('.fp-tabs-nav li').removeClass('active');
                $(this).parent().addClass('active');

                $('.fp-tab-panel').removeClass('active');
                $(tabId).addClass('active');
            });
        },

        // Configurar uploader de PDF
        setupPdfUploader: function () {
            var self = this;
            var pdfFrame;

            $('#fp_pdf_button').on('click', function (e) {
                e.preventDefault();

                if (pdfFrame) {
                    pdfFrame.open();
                    return;
                }

                pdfFrame = wp.media({
                    title: 'Seleccionar PDF',
                    button: { text: 'Usar este PDF' },
                    library: { type: 'application/pdf' },
                    multiple: false
                });

                pdfFrame.on('select', function () {
                    var attachment = pdfFrame.state().get('selection').first().toJSON();
                    $('#fp_pdf').val(attachment.url);

                    // Recargar la página para mostrar la vista previa
                    setTimeout(function () {
                        location.reload();
                    }, 500);
                });

                pdfFrame.open();
            });
        },

        // Configurar uploader de audio
        setupAudioUploader: function () {
            // Gestión de audio actual
            $('.fp-audio-upload-btn').on('click', function (e) {
                e.preventDefault();
                var button = $(this);
                var inputField = $('#' + button.data('input'));

                var audioFrame = wp.media({
                    title: 'Seleccionar archivo de audio',
                    button: { text: 'Usar este audio' },
                    library: { type: 'audio' },
                    multiple: false
                });

                audioFrame.on('select', function () {
                    var attachment = audioFrame.state().get('selection').first().toJSON();
                    inputField.val(attachment.url);

                    // Actualizar o crear la vista previa
                    var audioControls = inputField.closest('.fp-audio-row').find('.fp-audio-controls');
                    if (audioControls.find('.fp-audio-preview').length === 0) {
                        audioControls.append(
                            '<div class="fp-audio-preview">' +
                            '<audio controls src="' + attachment.url + '" style="max-width: 250px; height: 30px;"></audio>' +
                            '</div>'
                        );
                    } else {
                        audioControls.find('audio').attr('src', attachment.url);
                    }
                });

                audioFrame.open();
            });

            // Añadir campo de audio
            var audioIndex = $('#fp_audio_container .fp-audio-row').length;
            $('#add_audio_button').on('click', function () {
                audioIndex++;

                var fieldId = 'fp_audio_' + audioIndex;
                var newRow =
                    '<div class="fp-audio-row">' +
                    '  <div class="fp-audio-number"><span>Página ' + audioIndex + '</span></div>' +
                    '  <div class="fp-audio-input">' +
                    '    <input type="text" name="fp_audios[]" id="' + fieldId + '" class="regular-text fp-audio-url-input" placeholder="URL del archivo de audio">' +
                    '    <button type="button" class="button fp-audio-upload-btn" data-input="' + fieldId + '">Subir Audio</button>' +
                    '  </div>' +
                    '  <div class="fp-audio-controls">' +
                    '    <button type="button" class="button button-secondary remove-audio">Eliminar</button>' +
                    '  </div>' +
                    '</div>';

                $('#fp_audio_container').append(newRow);

                // Reinicializar el botón de subida para el nuevo campo
                FlipbookAdmin.setupAudioUploader();

                // Actualizar las etiquetas de número de página
                FlipbookAdmin.updateAudioLabels();
            });

            // Eliminar campo de audio
            $('#fp_audio_container').on('click', '.remove-audio', function () {
                $(this).closest('.fp-audio-row').remove();
                FlipbookAdmin.updateAudioLabels();
            });
        },

        // Actualizar etiquetas de número de página en campos de audio
        updateAudioLabels: function () {
            $('#fp_audio_container .fp-audio-row').each(function (index) {
                $(this).find('.fp-audio-number span').html('Página ' + (index + 1));
            });
        },

        // Configurar editor de áreas interactivas
        setupAreasEditor: function () {
            var self = this;
            var $selectionBox = null;
            var selectionStart = { x: 0, y: 0 };

            // Inicializar overlay cuando el iframe se carga
            $('#pdf_preview_iframe').on('load', function () {
                self.renderExistingAreas();
            });

            // Navegación por páginas
            $('#fp_go_to_page').on('click', function () {
                self.navigateToPage();
            });

            $('#fp_editor_page').on('keypress', function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    self.navigateToPage();
                }
            });

            // Cambio de tipo de área interactiva
            $('#popup_type').on('change', function () {
                var selectedType = $(this).val();
                // Ocultar todos los campos específicos
                $('.fp-youtube-url-field, .fp-page-jump-field').hide();

                // Mostrar campos según el tipo seleccionado
                switch (selectedType) {
                    case 'youtube':
                        $('.fp-youtube-url-field').show();
                        break;
                    case 'page':
                        $('.fp-page-jump-field').show();
                        break;
                }
            });

            // Iniciar selección
            $('#fp_start_selection').on('click', function () {
                self.config.isSelecting = true;
                $('#fp_selection_overlay').addClass('selecting');
                $(this).hide();
                $('#fp_cancel_selection').show();

                // Crear selección si no existe
                if (!$selectionBox) {
                    $selectionBox = $('<div class="fp-selection-box"></div>');
                    $('#fp_selection_overlay').append($selectionBox);
                }

                $selectionBox.hide();
            });

            // Cancelar selección
            $('#fp_cancel_selection').on('click', function () {
                self.cancelSelection();
            });

            // Eventos de mouse para selección
            $('#fp_selection_overlay').on('mousedown', function (e) {
                if (!self.config.isSelecting) return;

                var overlay = $(this);
                var offsetX = e.pageX - overlay.offset().left;
                var offsetY = e.pageY - overlay.offset().top;

                selectionStart = { x: offsetX, y: offsetY };

                $selectionBox.css({
                    left: offsetX + 'px',
                    top: offsetY + 'px',
                    width: '0',
                    height: '0'
                }).show();
            });

            $('#fp_selection_overlay').on('mousemove', function (e) {
                if (!self.config.isSelecting || !$selectionBox.is(':visible')) return;

                var overlay = $(this);
                var offsetX = e.pageX - overlay.offset().left;
                var offsetY = e.pageY - overlay.offset().top;

                var width = Math.abs(offsetX - selectionStart.x);
                var height = Math.abs(offsetY - selectionStart.y);

                // Calcular esquina superior izquierda
                var left = Math.min(offsetX, selectionStart.x);
                var top = Math.min(offsetY, selectionStart.y);

                $selectionBox.css({
                    left: left + 'px',
                    top: top + 'px',
                    width: width + 'px',
                    height: height + 'px'
                });
            });

            $('#fp_selection_overlay').on('mouseup', function (e) {
                if (!self.config.isSelecting || !$selectionBox.is(':visible')) return;

                var overlay = $(this);
                var offsetX = e.pageX - overlay.offset().left;
                var offsetY = e.pageY - overlay.offset().top;

                // Finalizar selección
                var width = Math.abs(offsetX - selectionStart.x);
                var height = Math.abs(offsetY - selectionStart.y);

                // Esquina superior izquierda
                var left = Math.min(offsetX, selectionStart.x);
                var top = Math.min(offsetY, selectionStart.y);

                // Verificar tamaño mínimo
                if (width < 10 || height < 10) {
                    $selectionBox.hide();
                    return;
                }

                // Mostrar formulario
                self.showAreaForm(left, top, width, height, $selectionBox);
            });

            // Guardar área
            $('#fp_save_area').on('click', function () {
                self.saveAreaFromSelection($selectionBox);
            });

            // Cancelar área
            $('#fp_cancel_area').on('click', function () {
                self.hideAreaForm();
                self.cancelSelection();
            });
        },

        // Navegar a una página específica
        navigateToPage: function () {
            var pageNum = parseInt($('#fp_editor_page').val(), 10);
            if (isNaN(pageNum) || pageNum < 1) return;

            this.config.currentPage = pageNum;

            // Re-renderizar áreas existentes para la nueva página
            this.renderExistingAreas();
        },

        // Cancelar selección actual
        cancelSelection: function () {
            this.config.isSelecting = false;
            $('#fp_selection_overlay').removeClass('selecting');
            $('#fp_start_selection').show();
            $('#fp_cancel_selection').hide();

            // Asegurar que se oculte la caja de selección correctamente
            $('.fp-selection-box').hide().removeData('selection');

            // Asegurar que se oculte el formulario de área
            this.hideAreaForm();
        },

        // Mostrar formulario para configurar área
        showAreaForm: function (left, top, width, height, $selectionBox) {
            // Guardar datos de selección
            $selectionBox.data('selection', {
                left: left / this.config.pdfScale,
                top: top / this.config.pdfScale,
                width: width / this.config.pdfScale,
                height: height / this.config.pdfScale,
                page: this.config.currentPage
            });

            // Mostrar formulario cerca de la selección
            var formLeft = left + width + 10;
            var formTop = top;

            // Limpiar formulario
            $('#popup_url').val('');
            $('#popup_tooltip').val('');
            $('#popup_new_tab').prop('checked', false);
            $('#popup_type').val('url'); // Valor predeterminado: URL
            $('#popup_youtube_url').val('');
            $('#popup_target_page').val('1');
            $('.fp-youtube-url-field, .fp-page-jump-field').hide(); // Ocultar campos específicos

            // Si estamos editando, cargar datos existentes
            if (this.config.editingAreaIndex >= 0) {
                var $row = $(`.fp-interactive-area-row[data-area-index="${this.config.editingAreaIndex}"]`);

                // Cargar datos básicos
                $('#popup_url').val($row.find('input[name^="fp_areas"][name$="[url]"]').val());
                $('#popup_tooltip').val($row.find('input[name^="fp_areas"][name$="[tooltip]"]').val());
                $('#popup_new_tab').prop('checked', $row.find('input[name^="fp_areas"][name$="[new_tab]"]').is(':checked'));

                // Cargar tipo de área y mostrar campos correspondientes
                var areaType = $row.find('select[name^="fp_areas"][name$="[type]"]').val() || 'url';
                $('#popup_type').val(areaType);

                // Cargar datos específicos del tipo
                $('#popup_youtube_url').val($row.find('input[name^="fp_areas"][name$="[youtube_url]"]').val());
                $('#popup_target_page').val($row.find('input[name^="fp_areas"][name$="[target_page]"]').val() || '1');

                // Mostrar campos según tipo
                switch (areaType) {
                    case 'youtube':
                        $('.fp-youtube-url-field').show();
                        break;
                    case 'page':
                        $('.fp-page-jump-field').show();
                        break;
                }
            }

            // --- INICIO CÓDIGO A INSERTAR ---
            // Asegurar que los campos correctos se muestren al abrir/cargar el popup
            var currentPopupType = $('#popup_type').val();
            $('.fp-youtube-url-field').toggle(currentPopupType === 'youtube');
            $('.fp-page-jump-field').toggle(currentPopupType === 'page');
            // --- FIN CÓDIGO A INSERTAR ---

            // Mostrar (esta línea ya existe, la nueva lógica va antes)
            this.showAreaFormAtPosition(formLeft, formTop);
        },

        // Posicionar formulario en coordenadas específicas
        showAreaFormAtPosition: function (left, top) {
            var $form = $('#fp_area_form');
            $form.css({
                left: left + 'px',
                top: top + 'px'
            }).show();
        },

        // Ocultar formulario
        hideAreaForm: function () {
            $('#fp_area_form').hide();
            this.config.editingAreaIndex = -1;
        },

        // Guardar área desde selección
        saveAreaFromSelection: function ($selectionBox) {
            if (!$selectionBox || !$selectionBox.data('selection')) return;

            var selection = $selectionBox.data('selection');
            var url = $('#popup_url').val();
            var tooltip = $('#popup_tooltip').val();
            var newTab = $('#popup_new_tab').is(':checked');
            var areaType = $('#popup_type').val();
            var youtubeUrl = $('#popup_youtube_url').val();
            var targetPage = $('#popup_target_page').val();

            // Crear o actualizar área
            if (this.config.editingAreaIndex >= 0) {
                // Actualizar área existente
                var $row = $(`.fp-interactive-area-row[data-area-index="${this.config.editingAreaIndex}"]`);

                $row.find('input[name^="fp_areas"][name$="[page]"]').val(selection.page);
                $row.find('input[name^="fp_areas"][name$="[x]"]').val(selection.left.toFixed(1));
                $row.find('input[name^="fp_areas"][name$="[y]"]').val(selection.top.toFixed(1));
                $row.find('input[name^="fp_areas"][name$="[width]"]').val(selection.width.toFixed(1));
                $row.find('input[name^="fp_areas"][name$="[height]"]').val(selection.height.toFixed(1));
                $row.find('input[name^="fp_areas"][name$="[url]"]').val(url);
                $row.find('input[name^="fp_areas"][name$="[tooltip]"]').val(tooltip);
                $row.find('input[name^="fp_areas"][name$="[new_tab]"]').prop('checked', newTab);
                $row.find('select[name^="fp_areas"][name$="[type]"]').val(areaType);
                $row.find('input[name^="fp_areas"][name$="[youtube_url]"]').val(youtubeUrl);
                $row.find('input[name^="fp_areas"][name$="[target_page]"]').val(targetPage);

                // Actualizar visibilidad de campos según tipo
                this.updateFieldVisibility($row, areaType);

                // Actualizar encabezado
                $row.find('h4').text(`Área #${this.config.editingAreaIndex + 1} (Página ${selection.page})`);
            } else {
                // Crear nueva área
                var template = $('#fp_area_template').html();
                var areaIndex = $('.fp-interactive-area-row').length;
                var areaIndexPlus = areaIndex + 1; // Variable explícita para evitar confusión

                var newRow = template
                    .replace(/NEW_INDEX/g, areaIndex)
                    .replace(/NEW_INDEX_PLUS/g, areaIndexPlus) // Usar la variable explícita
                    .replace(/PAGE_NUM/g, selection.page)
                    .replace(/X_VALUE/g, selection.left.toFixed(1))
                    .replace(/Y_VALUE/g, selection.top.toFixed(1))
                    .replace(/WIDTH_VALUE/g, selection.width.toFixed(1))
                    .replace(/HEIGHT_VALUE/g, selection.height.toFixed(1))
                    .replace(/URL_VALUE/g, url)
                    .replace(/TOOLTIP_VALUE/g, tooltip)
                    .replace(/NEW_TAB_CHECKED/g, newTab ? 'checked' : '');

                $('#fp_interactive_container').append(newRow);

                // Seleccionar los campos en la nueva fila y establecer sus valores
                var $newRow = $('.fp-interactive-area-row').last();
                $newRow.find('select[name^="fp_areas"][name$="[type]"]').val(areaType);
                $newRow.find('input[name^="fp_areas"][name$="[youtube_url]"]').val(youtubeUrl);
                $newRow.find('input[name^="fp_areas"][name$="[target_page]"]').val(targetPage);

                // Actualizar visibilidad de campos según tipo
                this.updateFieldVisibility($newRow, areaType);

                $('.no-areas-message').remove();
            }

            // Importante: limpiar los datos de selección antes de cancelar
            $selectionBox.removeData('selection');

            // Ocultar la caja de selección
            $selectionBox.hide();

            // Salir del modo selección y ocultar formulario
            this.hideAreaForm();
            this.cancelSelection();

            // Re-renderizar áreas
            this.renderExistingAreas();

            // Volver a la pestaña de lista si era un área nueva
            if (this.config.editingAreaIndex < 0) {
                $('.fp-tabs-nav a[href="#tab-list"]').click();
            }

            // Forzar un reseteo completo del estado de selección
            this.config.isSelecting = false;
            $('#fp_selection_overlay').removeClass('selecting');
            $('#fp_start_selection').show();
            $('#fp_cancel_selection').hide();
        },

        // Actualiza la visibilidad de los campos según el tipo de área
        updateFieldVisibility: function ($row, areaType) {
            $row.find('.fp-youtube-url-field, .fp-page-jump-field').hide();

            switch (areaType) {
                case 'youtube':
                    $row.find('.fp-youtube-url-field').show();
                    break;
                case 'page':
                    $row.find('.fp-page-jump-field').show();
                    break;
            }
        },

        // Renderizar áreas existentes
        renderExistingAreas: function () {
            var self = this;
            var $areasOverlay = $('#fp_areas_overlay');
            $areasOverlay.empty();

            // Buscar todas las áreas para la página actual
            $('.fp-interactive-area-row').each(function () {
                var $row = $(this);
                var pageNum = parseInt($row.find('input[name^="fp_areas"][name$="[page]"]').val(), 10);

                if (pageNum === self.config.currentPage) {
                    var areaIndex = $row.data('area-index');
                    var x = parseFloat($row.find('input[name^="fp_areas"][name$="[x]"]').val());
                    var y = parseFloat($row.find('input[name^="fp_areas"][name$="[y]"]').val());
                    var width = parseFloat($row.find('input[name^="fp_areas"][name$="[width]"]').val());
                    var height = parseFloat($row.find('input[name^="fp_areas"][name$="[height]"]').val());

                    // Escalar coordenadas 
                    var scaledX = x * self.config.pdfScale;
                    var scaledY = y * self.config.pdfScale;
                    var scaledWidth = width * self.config.pdfScale;
                    var scaledHeight = height * self.config.pdfScale;

                    var $area = $('<div class="fp-existing-area"></div>')
                        .css({
                            left: scaledX + 'px',
                            top: scaledY + 'px',
                            width: scaledWidth + 'px',
                            height: scaledHeight + 'px'
                        })
                        .attr('data-area-index', areaIndex);

                    $areasOverlay.append($area);
                }
            });
        },

        // Configurar lista de áreas interactivas
        setupAreasList: function () {
            var self = this;

            // Añadir área
            $('#fp_add_area_btn').on('click', function () {
                var template = $('#fp_area_template').html();
                var areaIndex = $('.fp-interactive-area-row').length;

                var newRow = template
                    .replace(/NEW_INDEX/g, areaIndex)
                    .replace(/NEW_INDEX_PLUS/g, areaIndex + 1)
                    .replace(/PAGE_NUM/g, 1)
                    .replace(/X_VALUE/g, 0)
                    .replace(/Y_VALUE/g, 0)
                    .replace(/WIDTH_VALUE/g, 100)
                    .replace(/HEIGHT_VALUE/g, 30)
                    .replace(/URL_VALUE/g, '')
                    .replace(/TOOLTIP_VALUE/g, '')
                    .replace(/NEW_TAB_CHECKED/g, '');

                $('#fp_interactive_container').append(newRow);
                $('.no-areas-message').remove();
            });

            // Eliminar área
            $('#fp_interactive_container').on('click', '.remove-area', function () {
                $(this).closest('.fp-interactive-area-row').remove();

                if ($('#fp_interactive_container .fp-interactive-area-row').length === 0) {
                    $('#fp_interactive_container').html('<div class="no-areas-message">No hay áreas interactivas definidas. Haga clic en "Agregar Área Interactiva" para comenzar.</div>');
                }

                // Actualizar títulos
                $('#fp_interactive_container .fp-interactive-area-row').each(function (idx) {
                    $(this).find('h4').text('Área #' + (idx + 1) + ' (Página ' + $(this).find('input[name^="fp_areas"][name$="[page]"]').val() + ')');
                    $(this).attr('data-area-index', idx);
                    $(this).find('.edit-area-visually').attr('data-area-index', idx);
                });
            });

            // Editar área visualmente
            $('#fp_interactive_container').on('click', '.edit-area-visually', function () {
                self.config.editingAreaIndex = $(this).data('area-index');
                var $row = $(this).closest('.fp-interactive-area-row');

                // Cambiar a la pestaña visual
                $('.fp-tabs-nav li').removeClass('active');
                $('.fp-tabs-nav a[href="#tab-visual"]').parent().addClass('active');

                $('.fp-tab-panel').removeClass('active');
                $('#tab-visual').addClass('active');

                // Obtener página y navegar a ella
                var pageNum = parseInt($row.find('input[name^="fp_areas"][name$="[page]"]').val(), 10);
                $('#fp_editor_page').val(pageNum);
                self.config.currentPage = pageNum;

                // Mostrar selección para esta área
                setTimeout(function () {
                    var x = parseFloat($row.find('input[name^="fp_areas"][name$="[x]"]').val());
                    var y = parseFloat($row.find('input[name^="fp_areas"][name$="[y]"]').val());
                    var width = parseFloat($row.find('input[name^="fp_areas"][name$="[width]"]').val());
                    var height = parseFloat($row.find('input[name^="fp_areas"][name$="[height]"]').val());

                    // Iniciar modo selección
                    self.config.isSelecting = true;
                    $('#fp_selection_overlay').addClass('selecting');
                    $('#fp_start_selection').hide();
                    $('#fp_cancel_selection').show();

                    // Crear y mostrar caja de selección
                    var $selectionBox = $('.fp-selection-box');
                    if ($selectionBox.length === 0) {
                        $selectionBox = $('<div class="fp-selection-box"></div>');
                        $('#fp_selection_overlay').append($selectionBox);
                    }

                    // Escalar coordenadas
                    var scaledX = x * self.config.pdfScale;
                    var scaledY = y * self.config.pdfScale;
                    var scaledWidth = width * self.config.pdfScale;
                    var scaledHeight = height * self.config.pdfScale;

                    $selectionBox.css({
                        left: scaledX + 'px',
                        top: scaledY + 'px',
                        width: scaledWidth + 'px',
                        height: scaledHeight + 'px'
                    }).show();

                    // Guardar datos de selección
                    $selectionBox.data('selection', {
                        left: x,
                        top: y,
                        width: width,
                        height: height,
                        page: pageNum
                    });

                    // Llenar formulario con datos existentes
                    var url = $row.find('input[name^="fp_areas"][name$="[url]"]').val();
                    var tooltip = $row.find('input[name^="fp_areas"][name$="[tooltip]"]').val();
                    var newTab = $row.find('input[name^="fp_areas"][name$="[new_tab]"]').is(':checked');

                    $('#popup_url').val(url);
                    $('#popup_tooltip').val(tooltip);
                    $('#popup_new_tab').prop('checked', newTab);

                    // Mostrar formulario
                    var formLeft = scaledX + scaledWidth + 10;
                    var formTop = scaledY;
                    self.showAreaFormAtPosition(formLeft, formTop);

                }, 300);
            });
        },

        // Configuración del selector de color de tema
        setupThemeColorPicker: function () {
            // Añadir selector de color si no existe
            if (!$('#fp_theme_color_picker').length) {
                var colorPicker = `
                    <div class="fp-admin-section theme-color-section">
                        <h3>Color del tema y modo de visualización</h3>
                        <div class="fp-theme-options">
                            <div class="fp-theme-option">
                                <label>
                                    <input type="radio" name="fp_theme_mode" value="light" checked>
                                    <span class="fp-theme-preview light-theme">Modo claro</span>
                                </label>
                            </div>
                            <div class="fp-theme-option">
                                <label>
                                    <input type="radio" name="fp_theme_mode" value="dark">
                                    <span class="fp-theme-preview dark-theme">Modo oscuro</span>
                                </label>
                            </div>
                            <div class="fp-theme-option">
                                <label>
                                    <input type="radio" name="fp_theme_mode" value="user_choice">
                                    <span class="fp-theme-preview user-choice-theme">Elección del usuario</span>
                                </label>
                            </div>
                        </div>
                        <div class="fp-accent-color">
                            <label>
                                <strong>Color de acento (iconos, botones):</strong>
                                <input type="color" name="fp_accent_color" value="#e42535">
                            </label>
                        </div>
                        
                        <input type="hidden" id="fp_theme_mode" name="fp_theme_mode" value="light">
                        <input type="hidden" id="fp_accent_color" name="fp_accent_color" value="#e42535">
                    </div>
                `;

                // Insertar después de la sección de PDF
                $('.pdf-upload-section').after(colorPicker);

                // Inicializar con valor guardado si existe
                var savedTheme = $('input[name="fp_theme_mode"]:radio').filter('[value="' + $('#fp_theme_mode').val() + '"]');
                if (savedTheme.length) {
                    savedTheme.prop('checked', true);
                }

                if ($('#fp_accent_color').val()) {
                    $('input[name="fp_accent_color"]').val($('#fp_accent_color').val());
                }

                // Actualizar campo oculto al cambiar la selección
                $('input[name="fp_theme_mode"]:radio').on('change', function () {
                    $('#fp_theme_mode').val($(this).val());
                });

                $('input[name="fp_accent_color"]').on('change', function () {
                    $('#fp_accent_color').val($(this).val());
                });
            }
        },

        // Configurar importación de datos de InDesign
        setupInDesignImport: function () {
            $('#fp_import_indesign').on('click', function () {
                var fileInput = $('#fp_indesign_json')[0];

                if (!fileInput.files || fileInput.files.length === 0) {
                    alert('Por favor, seleccione un archivo JSON de InDesign para importar.');
                    return;
                }

                var file = fileInput.files[0];
                var reader = new FileReader();

                reader.onload = function (e) {
                    try {
                        var jsonData = JSON.parse(e.target.result);

                        // Procesar datos de InDesign
                        var processedData = FlipbookAdmin.processInDesignData(jsonData);

                        // Actualizar la tabla de acciones
                        FlipbookAdmin.updateInDesignActionsList(processedData);

                        // Actualizar el campo oculto con los datos procesados
                        $('#fp_indesign_data').val(JSON.stringify(processedData));

                        alert('Datos de InDesign importados correctamente.');
                    } catch (error) {
                        console.error('Error al procesar el archivo JSON:', error);
                        alert('Error al procesar el archivo. Asegúrese de que es un JSON válido.');
                    }
                };

                reader.readAsText(file);
            });

            // Eliminar acción de InDesign
            $('.fp-indesign-list').on('click', '.remove-indesign-action', function () {
                var index = $(this).data('index');
                var indesignData = JSON.parse($('#fp_indesign_data').val() || '[]');

                // Eliminar la acción del array
                indesignData.splice(index, 1);

                // Actualizar el campo oculto y la lista
                $('#fp_indesign_data').val(JSON.stringify(indesignData));
                FlipbookAdmin.updateInDesignActionsList(indesignData);
            });
        },

        // Procesar datos JSON de InDesign
        processInDesignData: function (jsonData) {
            var processedData = [];

            // Verificar la estructura del JSON (puede variar según la exportación de InDesign)
            if (jsonData.hyperlinks && Array.isArray(jsonData.hyperlinks)) {
                // Ejemplo de estructura: Array de hyperlinks con source y destination
                jsonData.hyperlinks.forEach(function (hyperlink, index) {
                    if (hyperlink.source && hyperlink.destination) {
                        var action = {
                            id: 'indesign_' + index,
                            sourcePage: hyperlink.source.page || 1,
                            x: hyperlink.source.x || 0,
                            y: hyperlink.source.y || 0,
                            width: hyperlink.source.width || 100,
                            height: hyperlink.source.height || 30
                        };

                        // Determinar tipo de destino
                        if (hyperlink.destination.type === 'page') {
                            action.type = 'goto';
                            action.targetPage = hyperlink.destination.page || 1;
                        } else if (hyperlink.destination.type === 'url') {
                            action.type = 'url';
                            action.url = hyperlink.destination.url || '#';
                            action.openInNewTab = hyperlink.destination.newWindow || false;
                        }

                        processedData.push(action);
                    }
                });
            } else if (jsonData.actions && Array.isArray(jsonData.actions)) {
                // Estructura alternativa: Array of actions
                jsonData.actions.forEach(function (action, index) {
                    var newAction = {
                        id: 'indesign_' + index,
                        sourcePage: action.page || 1,
                        x: action.bounds ? action.bounds.x || 0 : 0,
                        y: action.bounds ? action.bounds.y || 0 : 0,
                        width: action.bounds ? action.bounds.width || 100 : 100,
                        height: action.bounds ? action.bounds.height || 30 : 30
                    };

                    if (action.actionType === 'goToPage') {
                        newAction.type = 'goto';
                        newAction.targetPage = action.targetPage || 1;
                    } else if (action.actionType === 'goToURL') {
                        newAction.type = 'url';
                        newAction.url = action.url || '#';
                        newAction.openInNewTab = action.openInNewWindow || false;
                    }

                    processedData.push(newAction);
                });
            } else {
                // Intentar procesar formato genérico
                if (Array.isArray(jsonData)) {
                    jsonData.forEach(function (item, index) {
                        var newAction = {
                            id: 'indesign_' + index,
                            sourcePage: item.sourcePage || item.page || 1,
                            x: item.x || 0,
                            y: item.y || 0,
                            width: item.width || 100,
                            height: item.height || 30,
                            type: item.type || 'goto'
                        };

                        if (newAction.type === 'goto') {
                            newAction.targetPage = item.targetPage || 1;
                        } else if (newAction.type === 'url') {
                            newAction.url = item.url || '#';
                            newAction.openInNewTab = item.openInNewTab || false;
                        }

                        processedData.push(newAction);
                    });
                }
            }

            return processedData;
        },

        // Actualizar la lista de acciones de InDesign
        updateInDesignActionsList: function (indesignData) {
            var $list = $('.fp-indesign-list');

            if (!indesignData || indesignData.length === 0) {
                $list.html('<p>No hay acciones de InDesign importadas.</p>');
                return;
            }

            var tableHtml = '<table class="widefat striped">' +
                '<thead>' +
                '<tr>' +
                '<th>Página Origen</th>' +
                '<th>Tipo</th>' +
                '<th>Destino</th>' +
                '<th>Acciones</th>' +
                '</tr>' +
                '</thead>' +
                '<tbody>';

            indesignData.forEach(function (action, index) {
                var destination = '';

                if (action.type === 'goto') {
                    destination = 'Página ' + action.targetPage;
                } else if (action.type === 'url') {
                    destination = action.url;
                }

                tableHtml += '<tr>' +
                    '<td>' + action.sourcePage + '</td>' +
                    '<td>' + action.type + '</td>' +
                    '<td>' + destination + '</td>' +
                    '<td>' +
                    '<button type="button" class="button remove-indesign-action" data-index="' + index + '">Eliminar</button>' +
                    '</td>' +
                    '</tr>';
            });

            tableHtml += '</tbody></table>';

            $list.html(tableHtml);
        }
    };

    // Inicializar cuando el DOM esté listo
    $(document).ready(function () {
        FlipbookAdmin.init();
    });

})(jQuery);
</file>

<file path="README.md">
# INSTALACIÓN Y USO DEL PLUGIN FP-CP

## ESTRUCTURA DEL PLUGIN

```
flipbook-contraplano/
├── css/
│   ├── fp-front.css
│   └── fp-admin.css
├── js/
│   ├── fp-front.js
│   └── fp-admin.js
└── flipbook-plugin.php
```

## INSTALACIÓN

1. **Preparación del archivo ZIP**:

   - Descarga el archivo ZIP del plugin Flipbook Contraplano
   - Asegúrate de que la estructura de carpetas sea exactamente como se muestra arriba
2. **Instalación en WordPress**:

   - Inicia sesión en el panel de administración de WordPress
   - Navega a "Plugins" > "Añadir nuevo"
   - Haz clic en "Subir plugin"
   - Selecciona el archivo ZIP del plugin y haz clic en "Instalar ahora"
   - Una vez completada la instalación, haz clic en "Activar plugin"
3. **Instalación manual (alternativa)**:

   - Descomprime el archivo ZIP
   - Sube la carpeta `flipbook-contraplano` al directorio `/wp-content/plugins/` de tu instalación WordPress
   - Activa el plugin desde el panel de administración de WordPress

## USO DEL PLUGIN

### 1. CREAR UN FLIPBOOK

1. **Acceder al menú de Flipbooks**:

   - En el panel de administración de WordPress, verás un nuevo menú llamado "Flipbooks"
   - Haz clic en "Añadir nuevo" para crear un flipbook
2. **Configurar el Flipbook**:

   - **Título**: Asigna un título descriptivo a tu flipbook
   - **PDF del Flipbook**:
     - Haz clic en "Subir PDF" para seleccionar o subir un archivo PDF
     - El PDF se mostrará como un flipbook interactivo
   - **Audios por página**:
     - Puedes añadir archivos de audio para cada página del flipbook
     - El primer audio corresponde a la página 1, el segundo a la página 2, etc.
     - Haz clic en "+ Agregar Audio" para añadir más audios
3. **Áreas Interactivas**:

   - En la pestaña "Áreas Interactivas", puedes definir áreas clickeables en el PDF
   - Estas áreas pueden enlazar a URLs externas, navegar a otras páginas del mismo PDF o reproducir videos de YouTube
4. **Acciones de InDesign**:

   - En la pestaña "Acciones de InDesign", puedes importar acciones definidas en Adobe InDesign
   - Estas acciones pueden configurarse para navegar entre páginas o abrir enlaces
5. **Guardar el Flipbook**:

   - Haz clic en "Publicar" o "Actualizar" para guardar tu flipbook

### 2. INSERTAR EL FLIPBOOK EN UNA PÁGINA O ENTRADA

1. **Usando el botón de inserción**:

   - Edita la página o entrada donde deseas insertar el flipbook
   - Haz clic en el botón "Insertar Flipbook" (icono de libro) en la barra de herramientas
   - Selecciona el flipbook que deseas insertar de la lista
   - El shortcode se insertará automáticamente en el formato `[flipbook=ID]`
2. **Usando el shortcode manualmente**:

   - Puedes insertar el shortcode `[flipbook=ID]` directamente en el editor
   - Reemplaza "ID" con el ID del flipbook que deseas mostrar
   - El ID se puede encontrar en la URL cuando editas el flipbook (por ejemplo, `post.php?post=123&action=edit`)

### 3. PERSONALIZACIÓN

1. **Configuración visual**:

   - Puedes personalizar el aspecto del flipbook desde el panel de administración
   - Selecciona un tema (claro/oscuro) y un color de acento
2. **Parámetros del shortcode**:

   - El shortcode acepta varios parámetros para personalizar la visualización:
     - `[flipbook=ID width="100%" height="600px" view_mode="double"]`
     - `width`: Ancho del flipbook (por defecto: 100%)
     - `height`: Alto del flipbook (por defecto: 600px)
     - `view_mode`: Modo de visualización ("single" o "double", por defecto: "double")

## SOLUCIÓN DE PROBLEMAS

1. **El PDF no se muestra**:

   - Verifica que el PDF se haya subido correctamente
   - Asegúrate de que el formato del shortcode sea correcto: `[flipbook=ID]` (sin comillas), igualmente prueba con y sin comillas.
   - Comprueba que el ID del flipbook sea correcto
2. **Los audios no se reproducen**:

   - Verifica que los archivos de audio se hayan subido correctamente
   - Asegúrate de que los formatos de audio sean compatibles con el navegador (MP3, WAV, OGG)
3. **Las áreas interactivas no funcionan**:

   - Verifica que las coordenadas de las áreas interactivas sean correctas
   - Asegúrate de que los enlaces o acciones estén configurados correctamente

## RECOMENDACIONES

1. **Optimización de PDFs**:

   - Para un mejor rendimiento, optimiza tus PDFs antes de subirlos
   - Reduce el tamaño de las imágenes dentro del PDF
   - Considera dividir PDFs muy grandes en varios flipbooks más pequeños
2. **Compatibilidad de navegadores**:

   - El plugin funciona mejor en navegadores modernos como Chrome, Firefox, Safari y Edge
   - Para una experiencia óptima, recomienda a tus usuarios utilizar estos navegadores
3. **Rendimiento**:

   - Los flipbooks con muchos audios o áreas interactivas pueden cargar más lentamente
   - Considera limitar el número de elementos interactivos para mejorar el rendimiento
</file>

<file path="flipbook-contraplano/js/fp-front.js">
/**
 * Controlador principal del Flipbook Contraplano para WordPress
 * Versión: 1.5
 * Implementa funcionalidad de visualización PDF en formato flipbook
 */
jQuery(document).ready(function ($) {
    // Verificar dependencias cargadas
    if (typeof pdfjsLib === 'undefined') {
        console.error('PDF.js no está cargado. Asegúrese de que la biblioteca se cargue correctamente.');
        return;
    }

    // Configurar worker de PDF.js
    if (fpConfig && fpConfig.pdfWorkerSrc) {
        pdfjsLib.GlobalWorkerOptions.workerSrc = fpConfig.pdfWorkerSrc;
    } else {
        console.warn('No se ha configurado la ruta del worker de PDF.js. Se usará el predeterminado.');
    }

    // Procesar cada instancia de flipbook en la página
    $('.flipbook-container').each(function () {
        // Elementos DOM y configuración
        const $container = $(this);
        const $viewerArea = $container.find('.fp-viewer-area');
        const $pdfViewer = $container.find('.fp-pdf-viewer');
        const $pagesContainer = $container.find('.fp-pages-container');
        const $loading = $container.find('.fp-loading');
        const $prevArrow = $container.find('.fp-arrow-left');
        const $nextArrow = $container.find('.fp-arrow-right');
        const $audioPlayer = $container.find('.fp-audio-player');
        const $pageInput = $container.find('.fp-page-input');
        const $totalPages = $container.find('.fp-total-pages');
        const $zoomSlider = $container.find('.fp-zoom-slider');
        const $zoomInBtn = $container.find('.fp-zoom-in');
        const $zoomOutBtn = $container.find('.fp-zoom-out');
        const $viewToggleBtn = $container.find('.fp-view-toggle');
        const $fullscreenBtn = $container.find('.fp-fullscreen');
        const $gotoPageBtn = $container.find('.fp-goto-page');

        // Estado del flipbook
        const pdfUrl = $container.data('pdf');
        let pdfDoc = null;
        let activeRenderTasks = {};
        let pages = [];
        let currentPageNum = 1;
        let totalPagesCount = 0;
        let zoomLevel = 1.0;
        let isRendering = false;
        let viewMode = $container.data('view-mode') || 'double';
        let isFullscreen = false;

        // Valores predefinidos para audios e interacciones
        const audios = fpConfig?.audios || [];
        const interactiveAreas = fpConfig?.interactiveAreas || [];

        // Cancelar tareas de renderizado anteriores para mejorar rendimiento
        function cancelRenderTasks() {
            Object.values(activeRenderTasks).forEach(task => {
                if (task && typeof task.cancel === 'function') {
                    task.cancel();
                }
            });
            activeRenderTasks = {};
        }

        // Renderizar una página del PDF
        async function renderPage(pageNumber, element, scale = 1) {
            if (!pdfDoc || pageNumber < 1 || pageNumber > totalPagesCount) {
                console.error(`Número de página inválido: ${pageNumber}`);
                return null;
            }

            const pageIndex = pageNumber - 1;
            const taskId = `page_${pageNumber}_${scale.toFixed(2)}`;

            // Cancelar renderizado previo de esta página
            if (activeRenderTasks[taskId]) {
                activeRenderTasks[taskId].cancel();
                delete activeRenderTasks[taskId];
            }

            try {
                // Obtener la página PDF
                const pdfPage = await pdfDoc.getPage(pageNumber);

                // Calcular viewport según escala
                const viewport = pdfPage.getViewport({ scale });

                // Crear o reutilizar canvas
                let canvas = $(element).find('canvas')[0];
                if (!canvas) {
                    canvas = document.createElement('canvas');
                    $(element).append(canvas);
                }

                // Configurar canvas para renderizado
                const context = canvas.getContext('2d');
                canvas.width = Math.floor(viewport.width);
                canvas.height = Math.floor(viewport.height);

                // Contexto para renderizar
                const renderContext = {
                    canvasContext: context,
                    viewport: viewport
                };

                // Renderizar la página
                const renderTask = pdfPage.render(renderContext);
                activeRenderTasks[taskId] = renderTask;

                await renderTask.promise;
                delete activeRenderTasks[taskId];

                // Almacenar dimensiones y referencia a la página
                pages[pageIndex] = {
                    pageNum: pageNumber,
                    width: viewport.width,
                    height: viewport.height,
                    rendered: true,
                    element: $(element)
                };

                return {
                    element: $(element),
                    width: viewport.width,
                    height: viewport.height
                };
            } catch (error) {
                if (error instanceof pdfjsLib.RenderingCancelledException) {
                    console.log(`Renderizado de página ${pageNumber} cancelado`);
                } else {
                    console.error(`Error al renderizar página ${pageNumber}:`, error);
                }
                return null;
            }
        }

        // Inicializar el flipbook
        async function initFlipbook() {
            if (!pdfUrl) {
                $loading.text('Error: URL del PDF no encontrada');
                return;
            }

            try {
                $loading.show();

                // Cargar el PDF
                pdfDoc = await pdfjsLib.getDocument(pdfUrl).promise;
                totalPagesCount = pdfDoc.numPages;

                // Inicializar array de páginas
                pages = new Array(totalPagesCount);

                // Actualizar UI con total de páginas
                $totalPages.text(totalPagesCount);
                $pageInput.attr('max', totalPagesCount);

                // Configurar contenedor para vista
                setupViewMode();

                // Renderizar páginas iniciales
                await renderCurrentView();
                preloadAdjacentPages();

                // Configurar eventos de interacción
                setupEventListeners();

                $loading.hide();
            } catch (error) {
                console.error('Error al cargar el PDF:', error);
                $loading.text(`Error al cargar el PDF: ${error.message}`);
            }
        }

        // Configurar modo de visualización (simple/doble)
        function setupViewMode() {
            $container.attr('data-view-mode', viewMode);

            // Actualizar UI del botón de modo
            if (viewMode === 'single') {
                $viewToggleBtn.attr('title', 'Cambiar a vista doble');
            } else {
                $viewToggleBtn.attr('title', 'Cambiar a vista simple');
            }
        }

        // Renderizar la vista actual según el modo y página actual
        async function renderCurrentView() {
            if (isRendering) return;
            isRendering = true;

            try {
                // Limpiar contenedor y preparar renderizado
                cancelRenderTasks();
                $prevArrow.prop('disabled', currentPageNum <= 1);
                $nextArrow.prop('disabled', currentPageNum >= totalPagesCount);

                // Actualizar input de página
                $pageInput.val(currentPageNum);

                if (viewMode === 'single') {
                    await renderSinglePageView();
                } else {
                    await renderDoublePageView();
                }

                // Actualizar audio para la página actual
                updateAudioForPage(currentPageNum);

                // Renderizar áreas interactivas
                renderInteractiveAreas();
            } catch (error) {
                console.error('Error al renderizar vista:', error);
            } finally {
                isRendering = false;
            }
        }

        // Renderizar vista de página individual
        async function renderSinglePageView() {
            // Limpiar contenedor
            $pagesContainer.empty();

            // Crear contenedor para la página
            const $pageElement = $('<div class="fp-page active"></div>');
            $pagesContainer.append($pageElement);

            // Definir dimensiones de la página
            const containerHeight = $pdfViewer.height() * 0.95;
            const containerWidth = $pdfViewer.width() * 0.9;

            try {
                // Obtener página para calcular proporciones
                const page = await pdfDoc.getPage(currentPageNum);
                const viewport = page.getViewport({ scale: 1.0 });

                // Calcular escala para ajustar al contenedor
                const scale = Math.min(
                    containerWidth / viewport.width,
                    containerHeight / viewport.height
                ) * zoomLevel;

                // Aplicar escala a la página
                await renderPage(currentPageNum, $pageElement, scale);

                // Centrar la página en el contenedor
                const scaledViewport = page.getViewport({ scale });
                $pageElement.css({
                    width: `${scaledViewport.width}px`,
                    height: `${scaledViewport.height}px`
                });
            } catch (error) {
                console.error(`Error al renderizar página ${currentPageNum}:`, error);
            }
        }

        // Renderizar vista de página doble
        async function renderDoublePageView() {
            // Limpiar contenedor
            $pagesContainer.empty();

            // Determinar páginas a mostrar (izq/der)
            let leftPageNum = currentPageNum % 2 === 0 ? currentPageNum - 1 : currentPageNum;
            let rightPageNum = leftPageNum + 1;

            // Manejar casos especiales (primera y última página)
            if (leftPageNum < 1) {
                leftPageNum = 1;
                rightPageNum = 2;
            }

            if (rightPageNum > totalPagesCount) {
                // Si estamos en la última página y es impar
                if (totalPagesCount % 2 !== 0 && currentPageNum === totalPagesCount) {
                    // Mostrar última página centrada
                    await renderSingleCenterPage(currentPageNum);
                    return;
                } else {
                    // Ajustar para evitar páginas fuera de rango
                    rightPageNum = totalPagesCount;
                    leftPageNum = rightPageNum - 1;
                    if (leftPageNum < 1) leftPageNum = 1;
                }
            }

            // Caso especial: primera página sola
            if (leftPageNum === 1 && fpConfig.startWithDoublePage !== true) {
                await renderSingleCenterPage(1);
                return;
            }

            // Crear elementos de página
            const $leftPage = $('<div class="fp-page left-page"></div>');
            const $rightPage = $('<div class="fp-page right-page"></div>');

            if (leftPageNum === currentPageNum || rightPageNum === currentPageNum) {
                // Marcar la página actual como activa
                if (leftPageNum === currentPageNum) {
                    $leftPage.addClass('active');
                } else {
                    $rightPage.addClass('active');
                }
            } else {
                // Si ninguna es la actual, activar la izquierda por defecto
                $leftPage.addClass('active');
                currentPageNum = leftPageNum; // Actualizar página actual
            }

            $pagesContainer.append($leftPage, $rightPage);

            // Dimensiones del contenedor
            const containerHeight = $pdfViewer.height() * 0.95;
            const containerWidth = $pdfViewer.width() * 0.9;

            try {
                // Obtener página para calcular proporciones
                const page = await pdfDoc.getPage(leftPageNum);
                const viewport = page.getViewport({ scale: 1.0 });

                // Calcular escala para ajustar ambas páginas
                const scale = Math.min(
                    (containerWidth / 2) / viewport.width,
                    containerHeight / viewport.height
                ) * zoomLevel;

                // Renderizar ambas páginas
                const leftResult = await renderPage(leftPageNum, $leftPage, scale);
                const rightResult = await renderPage(rightPageNum, $rightPage, scale);

                if (leftResult && rightResult) {
                    // Aplicar dimensiones
                    $leftPage.css({
                        width: `${leftResult.width}px`,
                        height: `${leftResult.height}px`
                    });

                    $rightPage.css({
                        width: `${rightResult.width}px`,
                        height: `${rightResult.height}px`
                    });
                }
            } catch (error) {
                console.error(`Error al renderizar páginas ${leftPageNum}/${rightPageNum}:`, error);
            }
        }

        // Renderizar página única centrada (primera o última)
        async function renderSingleCenterPage(pageNum) {
            // Limpiar contenedor
            $pagesContainer.empty();

            // Crear elemento de página
            const $page = $('<div class="fp-page single-center-page active"></div>');
            $pagesContainer.append($page);

            // Dimensiones del contenedor
            const containerHeight = $pdfViewer.height() * 0.95;
            const containerWidth = $pdfViewer.width() * 0.9;

            try {
                // Obtener página para calcular proporciones
                const page = await pdfDoc.getPage(pageNum);
                const viewport = page.getViewport({ scale: 1.0 });

                // Calcular escala para ajustar al contenedor
                const scale = Math.min(
                    containerWidth / viewport.width,
                    containerHeight / viewport.height
                ) * zoomLevel;

                // Renderizar página
                const result = await renderPage(pageNum, $page, scale);

                if (result) {
                    // Aplicar dimensiones
                    $page.css({
                        width: `${result.width}px`,
                        height: `${result.height}px`
                    });
                }
            } catch (error) {
                console.error(`Error al renderizar página centrada ${pageNum}:`, error);
            }
        }

        // Precargar páginas adyacentes para navegación más fluida
        function preloadAdjacentPages() {
            const pageIndexes = [];

            if (viewMode === 'single') {
                // En modo simple, precargar página siguiente y anterior
                if (currentPageNum < totalPagesCount) pageIndexes.push(currentPageNum + 1);
                if (currentPageNum > 1) pageIndexes.push(currentPageNum - 1);
            } else {
                // En modo doble, determinar páginas lógicas adyacentes
                const isEven = currentPageNum % 2 === 0;
                const leftPage = isEven ? currentPageNum - 1 : currentPageNum;
                const rightPage = leftPage + 1;

                // Páginas anteriores
                if (leftPage > 2) pageIndexes.push(leftPage - 2);
                if (leftPage > 1) pageIndexes.push(leftPage - 1);

                // Páginas siguientes
                if (rightPage < totalPagesCount) pageIndexes.push(rightPage + 1);
                if (rightPage + 1 < totalPagesCount) pageIndexes.push(rightPage + 2);
            }

            // Programar precarga con baja prioridad
            setTimeout(() => {
                pageIndexes.forEach(pageNum => {
                    // Crear elemento oculto para precarga
                    const $pageElement = $('<div class="fp-page" style="display:none;"></div>');
                    $pagesContainer.append($pageElement);

                    // Renderizar con escala más baja para ahorrar memoria
                    renderPage(pageNum, $pageElement, zoomLevel * 0.8).then(() => {
                        // Almacenar para uso futuro
                        pages[pageNum - 1] = {
                            pageNum: pageNum,
                            element: $pageElement,
                            rendered: true
                        };
                    }).catch(err => {
                        // Eliminar elemento si falla la precarga
                        $pageElement.remove();
                    });
                });
            }, 500); // Retrasar para priorizar renderizado de página actual
        }

        // Actualizar audio para la página actual
        function updateAudioForPage(pageNum) {
            // Detener cualquier audio anterior
            $audioPlayer.removeClass('visible');
            $audioPlayer.attr('src', '');

            // Si hay un audio asociado a esta página
            if (audios && audios[pageNum - 1]) {
                const audioUrl = audios[pageNum - 1];
                if (audioUrl && audioUrl.trim() !== '') {
                    $audioPlayer.attr('src', audioUrl);
                    $audioPlayer.addClass('visible');
                }
            }
        }

        // Renderizar áreas interactivas
        function renderInteractiveAreas() {
            // Eliminar áreas anteriores
            $('.fp-interactive-area').remove();

            if (!interactiveAreas || interactiveAreas.length === 0) return;

            // Crear áreas para la página actual
            interactiveAreas.forEach((area, index) => {
                const areaPage = parseInt(area.page, 10);
                if (isCurrentlyVisiblePage(areaPage)) {
                    createInteractiveArea(area, index);
                }
            });

            // Vincular acciones de eventos
            $('.fp-interactive-area').on('click', handleAreaClick);
        }

        // Verificar si una página está visible actualmente
        function isCurrentlyVisiblePage(pageNum) {
            if (viewMode === 'single') {
                return pageNum === currentPageNum;
            } else {
                // En modo doble, pueden ser visibles dos páginas
                const isEven = currentPageNum % 2 === 0;
                const leftPage = isEven ? currentPageNum - 1 : currentPageNum;
                const rightPage = leftPage + 1;

                // Casos especiales: primera página sola, última página sola
                if (leftPage === 1 && fpConfig.startWithDoublePage !== true) {
                    return pageNum === 1;
                }

                if (rightPage > totalPagesCount && totalPagesCount % 2 !== 0) {
                    return pageNum === totalPagesCount;
                }

                return pageNum === leftPage || pageNum === rightPage;
            }
        }

        // Crear área interactiva en la página
        function createInteractiveArea(area, index) {
            const x = parseFloat(area.x);
            const y = parseFloat(area.y);
            const width = parseFloat(area.width);
            const height = parseFloat(area.height);
            const areaPage = parseInt(area.page, 10);
            const tooltip = area.tooltip || '';

            // Encontrar el elemento de página correspondiente
            let $targetPage;

            if (viewMode === 'single') {
                $targetPage = $pagesContainer.find('.fp-page.active');
            } else {
                if (areaPage % 2 === 1) {
                    $targetPage = $pagesContainer.find('.fp-page.left-page');
                } else {
                    $targetPage = $pagesContainer.find('.fp-page.right-page');
                }

                // Manejar caso especial: página única centrada
                if ($pagesContainer.find('.fp-page.single-center-page').length) {
                    $targetPage = $pagesContainer.find('.fp-page.single-center-page');
                }
            }

            if (!$targetPage.length) return;

            // Calcular posición escalada
            const pageWidth = $targetPage.width();
            const pageHeight = $targetPage.height();
            const scaleX = pageWidth / area.baseWidth || 1;
            const scaleY = pageHeight / area.baseHeight || 1;

            const scaledX = x * scaleX;
            const scaledY = y * scaleY;
            const scaledWidth = width * scaleX;
            const scaledHeight = height * scaleY;

            // Crear elemento para el área
            const $area = $('<div class="fp-interactive-area"></div>')
                .css({
                    left: `${scaledX}px`,
                    top: `${scaledY}px`,
                    width: `${scaledWidth}px`,
                    height: `${scaledHeight}px`
                })
                .attr({
                    'data-area-index': index,
                    'data-area-type': area.type || 'url',
                    'data-area-page': areaPage,
                    'data-target': area.url || area.target_page || area.youtube_url || area.audio_url || ''
                });

            // Añadir tooltip si existe
            if (tooltip) {
                $area.append(`<span class="fp-interactive-tooltip">${tooltip}</span>`);
            }

            // Clases específicas según tipo
            if (area.type === 'youtube') {
                $area.addClass('fp-youtube-area');
            } else if (area.type === 'page') {
                $area.addClass('fp-page-jump-area');
            } else if (area.type === 'audio') {
                $area.addClass('fp-audio-area');
                $area.append('<div class="fp-audio-icon"></div>');
            }

            // Añadir al DOM
            $targetPage.append($area);
        }

        // Manejar clic en área interactiva
        function handleAreaClick(e) {
            e.preventDefault();
            const $area = $(this);
            const areaIndex = $area.data('area-index');
            const areaType = $area.data('area-type');

            if (!interactiveAreas || !interactiveAreas[areaIndex]) return;

            const area = interactiveAreas[areaIndex];

            switch (areaType) {
                case 'url':
                    // Abrir URL
                    if (area.url) {
                        const target = area.new_tab ? '_blank' : '_self';
                        window.open(area.url, target);
                    }
                    break;

                case 'page':
                    // Ir a página
                    if (area.target_page) {
                        goToPage(parseInt(area.target_page, 10));
                    }
                    break;

                case 'youtube':
                    // Mostrar video de YouTube
                    if (area.youtube_url) {
                        showYouTubePopup(area.tooltip || 'Video', area.youtube_url);
                    }
                    break;

                case 'audio':
                    // Reproducir audio
                    if (area.audio_url) {
                        playAudio(area.audio_url);
                    }
                    break;
            }
        }

        // Mostrar popup con video de YouTube
        function showYouTubePopup(title, videoId) {
            // Limpiar videoId (permitir formatos completos de URL)
            if (videoId.indexOf('youtube.com') !== -1 || videoId.indexOf('youtu.be') !== -1) {
                // Extraer ID de URL completa
                const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i;
                const match = videoId.match(regex);
                videoId = match ? match[1] : videoId;
            }

            const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1`;

            // Crear popup
            const $overlay = $('<div class="fp-popup-overlay"></div>');
            const $popup = $(`
                <div class="fp-popup">
                    <div class="fp-popup-header">
                        <h3>${title}</h3>
                        <button class="fp-popup-close">&times;</button>
                    </div>
                    <div class="fp-popup-body">
                        <div class="fp-video-container">
                            <iframe src="${embedUrl}" frameborder="0" allowfullscreen></iframe>
                        </div>
                    </div>
                </div>
            `);

            $overlay.append($popup);
            $('body').append($overlay);

            // Manejar cierre
            $overlay.on('click', function (e) {
                if ($(e.target).is($overlay) || $(e.target).is('.fp-popup-close')) {
                    $overlay.remove();
                }
            });
        }

        // Reproducir audio
        function playAudio(audioUrl) {
            // Detener cualquier audio anterior
            $audioPlayer.removeClass('visible');
            $audioPlayer.attr('src', '');

            // Reproducir nuevo audio
            if (audioUrl && audioUrl.trim() !== '') {
                $audioPlayer.attr('src', audioUrl);
                $audioPlayer.addClass('visible');
                $audioPlayer[0].play();
            }
        }

        // Ir a una página específica
        function goToPage(pageNum) {
            if (pageNum < 1 || pageNum > totalPagesCount) return;

            // Actualizar página actual
            currentPageNum = pageNum;

            // Renderizar nueva vista
            renderCurrentView();
        }

        // Configurar eventos de interacción
        function setupEventListeners() {
            // Navegación con flechas
            $prevArrow.on('click', function () {
                if ($(this).prop('disabled')) return;

                if (viewMode === 'single') {
                    goToPage(currentPageNum - 1);
                } else {
                    // En modo doble, retroceder dos páginas
                    const isEven = currentPageNum % 2 === 0;
                    const targetPage = isEven ? currentPageNum - 2 : currentPageNum - 1;
                    goToPage(Math.max(1, targetPage));
                }
            });

            $nextArrow.on('click', function () {
                if ($(this).prop('disabled')) return;

                if (viewMode === 'single') {
                    goToPage(currentPageNum + 1);
                } else {
                    // En modo doble, avanzar dos páginas
                    const isEven = currentPageNum % 2 === 0;
                    const targetPage = isEven ? currentPageNum + 1 : currentPageNum + 2;
                    goToPage(Math.min(totalPagesCount, targetPage));
                }
            });

            // Entrada directa de página
            $pageInput.on('keypress', function (e) {
                if (e.which === 13) {
                    e.preventDefault();
                    const pageNum = parseInt($(this).val(), 10);
                    goToPage(pageNum);
                }
            });

            $gotoPageBtn.on('click', function () {
                const pageNum = parseInt($pageInput.val(), 10);
                goToPage(pageNum);
            });

            // Zoom
            $zoomSlider.on('input', function () {
                zoomLevel = parseFloat($(this).val());
                renderCurrentView();
            });

            $zoomInBtn.on('click', function () {
                zoomLevel = Math.min(3.0, zoomLevel + 0.1);
                $zoomSlider.val(zoomLevel);
                renderCurrentView();
            });

            $zoomOutBtn.on('click', function () {
                zoomLevel = Math.max(0.5, zoomLevel - 0.1);
                $zoomSlider.val(zoomLevel);
                renderCurrentView();
            });

            // Cambiar modo de vista
            $viewToggleBtn.on('click', function () {
                viewMode = viewMode === 'single' ? 'double' : 'single';
                setupViewMode();
                renderCurrentView();
            });

            // Pantalla completa
            $fullscreenBtn.on('click', function () {
                toggleFullscreen();
            });

            // Selector de tema claro/oscuro si está habilitado
            $('.fp-background-option').on('click', function () {
                const theme = $(this).data('theme');
                $('.fp-background-option').removeClass('active');
                $(this).addClass('active');

                $container.removeClass('dark-mode light-mode');
                $container.addClass(theme + '-mode');
            });

            // Eventos de teclado cuando el flipbook tiene foco
            $container.on('click', function () {
                $(this).addClass('has-focus');
            });

            $(document).on('keydown', function (e) {
                if (!$container.hasClass('has-focus')) return;

                switch (e.which) {
                    case 37: // Flecha izquierda
                        $prevArrow.trigger('click');
                        break;
                    case 39: // Flecha derecha
                        $nextArrow.trigger('click');
                        break;
                    case 36: // Inicio
                        goToPage(1);
                        break;
                    case 35: // Fin
                        goToPage(totalPagesCount);
                        break;
                }
            });

            // Perder foco al hacer clic fuera
            $(document).on('click', function (e) {
                if (!$(e.target).closest($container).length) {
                    $container.removeClass('has-focus');
                }
            });

            // Redimensionar ventana
            let resizeTimer;
            $(window).on('resize', function () {
                clearTimeout(resizeTimer);
                resizeTimer = setTimeout(function () {
                    renderCurrentView();
                }, 200);
            });
        }

        // Alternar pantalla completa
        function toggleFullscreen() {
            if (!isFullscreen) {
                if ($container[0].requestFullscreen) {
                    $container[0].requestFullscreen();
                } else if ($container[0].mozRequestFullScreen) {
                    $container[0].mozRequestFullScreen();
                } else if ($container[0].webkitRequestFullscreen) {
                    $container[0].webkitRequestFullscreen();
                } else if ($container[0].msRequestFullscreen) {
                    $container[0].msRequestFullscreen();
                } else {
                    // Fallback si las APIs nativas no están disponibles
                    $container.addClass('fullscreen-active');
                }
            } else {
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                } else {
                    // Fallback
                    $container.removeClass('fullscreen-active');
                }
            }
        }

        // Escuchar cambios en el estado de pantalla completa
        document.addEventListener('fullscreenchange', handleFullscreenChange);
        document.addEventListener('mozfullscreenchange', handleFullscreenChange);
        document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
        document.addEventListener('MSFullscreenChange', handleFullscreenChange);

        function handleFullscreenChange() {
            isFullscreen = !!document.fullscreenElement ||
                !!document.mozFullScreenElement ||
                !!document.webkitFullscreenElement ||
                !!document.msFullscreenElement;

            if (isFullscreen) {
                $container.addClass('fullscreen-active');
                $fullscreenBtn.attr('title', 'Salir de pantalla completa');
            } else {
                $container.removeClass('fullscreen-active');
                $fullscreenBtn.attr('title', 'Pantalla completa');
            }

            // Re-renderizar para ajustar al nuevo tamaño
            setTimeout(renderCurrentView, 100);
        }

        // Iniciar flipbook
        initFlipbook();
    });
});
</file>

<file path="flipbook-contraplano/css/fp-front.css">
/* css/fp-front.css */

/* --- Variables --- */
:root {
    --fp-toolbar-height: 50px;
    --fp-arrow-size: 40px;
    --fp-page-bg: #fff;
    --fp-viewer-bg: #f0f0f0;
    --fp-container-bg: #eee;
    --fp-toolbar-bg: #444;
    --fp-toolbar-btn-color: #eee;
    --fp-toolbar-btn-hover-bg: #555;
    --fp-border-color: #ccc;
    --fp-accent-color: #e42535;
    /* Color rojo para iconos de audio */
}

/* --- Contenedor Principal --- */
.flipbook-container {
    position: relative;
    margin: 20px auto;
    width: 100%;
    max-width: 1200px;
    display: flex;
    flex-direction: column;
    background: var(--fp-container-bg);
    border-radius: 5px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    overflow: hidden;
    min-height: 500px;
    height: 80vh;
    z-index: 1;
    /* Importante para evitar problemas de superposición */
}

/* --- Área del Visor (PDF + Flechas) --- */
.fp-viewer-area {
    position: relative;
    width: 100%;
    flex-grow: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    background: var(--fp-viewer-bg);
    z-index: 5;
}

.fp-pdf-viewer {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    /* Asegúrate que las páginas estén apiladas verticalmente */
    align-items: center;
    justify-content: center;
    gap: 20px;
    /* Espacio entre páginas */
    transition: transform 0.3s ease;
    transform-origin: center center;
    user-select: none;
    z-index: 10;
    /* Prevenir zoom del navegador, permitir nuestro zoom personalizado */
    touch-action: pan-x pan-y;
}

/* Clase para el manejo de zoom personalizado */
.fp-custom-zoom {
    will-change: transform;
    transition: transform 0.1s ease-out;
}

/* Contenedor de las Páginas */
.fp-pages-container {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 90%;
    height: 90%;
    perspective: 2000px;
    perspective-origin: center center;
    transform-style: preserve-3d;
    z-index: 15;
}

/* --- Estilo de Página --- */
.fp-page {
    position: absolute;
    background-color: var(--fp-page-bg);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    border: 1px solid var(--fp-border-color);
    display: none;
    transform-style: preserve-3d;
    backface-visibility: hidden;
    transition: transform var(--fp-flip-duration) ease-in-out,
        opacity 0.3s ease,
        box-shadow 0.3s ease;
    -webkit-user-select: text;
    -moz-user-select: text;
    -ms-user-select: text;
    user-select: text;
}

.fp-page.active {
    display: block;
    opacity: 1;
    z-index: 20;
    transform: translateZ(0);
    transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1),
        opacity 0.3s ease,
        box-shadow 0.3s ease;
}

.fp-page.turning {
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    z-index: 25;
}

.fp-page-canvas {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: contain;
    /* Asegurar que el canvas no se escale con el zoom del navegador */
    max-width: 100%;
}


.flipbook-container[data-view-mode="double"] .fp-page.right-page {
    transform-origin: left center;
    right: 0;
    border-left: none;
}

/* Caso especial: Primera página sola y centrada en vista doble */
.flipbook-container[data-view-mode="double"] .fp-page.single-center-page {
    left: 50%;
    transform: translateX(-50%);
    transform-origin: center center;
    border: 1px solid var(--fp-border-color);
}

/* Caso especial: Última página sola y centrada si el total es impar */
.flipbook-container[data-view-mode="double"] .fp-page.last-page.single-center-page {
    left: 50%;
    transform: translateX(-50%);
    transform-origin: center center;
    border: 1px solid var(--fp-border-color);
}

.flipbook-container[data-view-mode="single"] .fp-page {
    left: 50%;
    transform: translateX(-50%);
    transform-origin: center center;
    border: 1px solid var(--fp-border-color);
}




/* Animación para las páginas que aparecen */
.fp-page.coming-left.active,
.fp-page.coming-right.active {
    transform: rotateY(0deg);
    z-index: 30;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    transition: transform 0.6s cubic-bezier(0.645, 0.045, 0.355, 1),
        box-shadow 0.3s ease,
        opacity 0.3s ease;
}

/* --- Flechas de Navegación --- */
.fp-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 100;
    background: rgba(0, 0, 0, 0.3);
    color: white;
    border: none;
    border-radius: 50%;
    width: var(--fp-arrow-size);
    height: var(--fp-arrow-size);
    font-size: calc(var(--fp-arrow-size) * 0.5);
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    pointer-events: none;
}

.flipbook-container:hover .fp-arrow {
    opacity: 0.6;
    pointer-events: auto;
}

.fp-arrow:hover {
    background: rgba(0, 0, 0, 0.6);
    transform: translateY(-50%) scale(1.1);
    opacity: 1;
}

.fp-arrow:disabled {
    opacity: 0.1 !important;
    cursor: not-allowed;
    transform: translateY(-50%) scale(1);
    pointer-events: none;
}

.fp-arrow-left {
    left: 15px;
}

.fp-arrow-right {
    right: 15px;
}

/* --- Indicador de Carga --- */
.fp-loading {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 15px 25px;
    background: rgba(255, 255, 255, 0.95);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    color: #333;
    font-style: italic;
    display: flex;
    align-items: center;
    gap: 10px;
}

.fp-loading::before {
    content: '';
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #aaa;
    border-top-color: #555;
    border-radius: 50%;
    animation: fp-spin 1s linear infinite;
}

@keyframes fp-spin {
    to {
        transform: rotate(360deg);
    }
}

/* --- Barra de Herramientas --- */
.fp-toolbar {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 5px 15px;
    background-color: var(--fp-toolbar-bg);
    color: var(--fp-toolbar-btn-color);
    height: var(--fp-toolbar-height);
    flex-shrink: 0;
    flex-wrap: wrap;
    gap: 10px;
    z-index: 50;
}

.fp-toolbar-group {
    display: flex;
    align-items: center;
    gap: 5px;
}

/* Botones de la Barra de Herramientas */
.fp-tool-btn {
    background: #333;
    border: 1px solid #666;
    color: var(--fp-toolbar-btn-color);
    font-size: 18px;
    cursor: pointer;
    padding: 6px 8px;
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
    line-height: 1;
}

.fp-tool-btn:hover {
    background-color: var(--fp-toolbar-btn-hover-bg);
    color: #fff;
}

.fp-tool-btn:active,
.fp-tool-btn.active {
    background-color: #666;
    color: #fff;
}

.fp-tool-btn i {
    vertical-align: middle;
}

/* Contenedor de Entrada de Página */
.fp-page-input-container {
    display: flex;
    align-items: center;

    padding: 3px 8px;
    border-radius: 4px;
}


.fp-page-input {
    width: 45px;
    padding: 4px 5px;
    border-radius: 3px;
    color: #fff;
    text-align: center;
    font-size: 20px;
}

.fp-page-input::-webkit-outer-spin-button,
.fp-page-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.fp-page-indicator {
    font-size: 20px;
    color: #ccc;
    margin-left: 5px;
    white-space: nowrap;
}

.fp-goto-page {
    margin-left: 5px;
}

/* Contenedor del Reproductor de Audio */
.fp-audio-container {
    margin-left: auto;
}

.fp-audio-player {
    display: none;
    max-height: 35px;
    vertical-align: middle;
    opacity: 0.9;
}

.fp-audio-player.visible {
    display: inline-block;
}

/* --- Pantalla Completa --- */
.flipbook-container.fullscreen-active {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    max-width: none;
    z-index: 9999;
    background-color: #333;
    border-radius: 0;
    /* Prevenir el zoom del navegador en pantalla completa */
    overflow: hidden;
}

/* Garantizar que el visor ocupe todo el espacio disponible en pantalla completa */
.fullscreen-active .fp-viewer-area {
    height: calc(100% - var(--fp-toolbar-height));
    width: 100%;
}

/* Asegurar que la barra de herramientas permanezca visible y no afectada por el zoom */
.fullscreen-active .fp-toolbar {
    position: relative;
    width: 100%;
    z-index: 100;
}

/* Clase específica para cuando se aplica zoom personalizado */
.fp-zooming {
    cursor: zoom-in;
}

.fp-zooming.fp-zooming-out {
    cursor: zoom-out;
}

/* Icono del botón de pantalla completa */
.fp-fullscreen i.dashicons-fullscreen-alt,
.fp-fullscreen i.dashicons-fullscreen-exit-alt {
    display: inline-block;
}

.fullscreen-active .fp-fullscreen i.dashicons-fullscreen-alt {
    display: none;
}

.fullscreen-active .fp-fullscreen i.dashicons-fullscreen-exit-alt {
    display: inline-block;
}

/* Estilos para áreas interactivas */
.fp-interactive-area {
    position: absolute;
    background-color: rgba(0, 0, 0, 0.05);
    border: 1px dashed rgba(0, 0, 0, 0.2);
    cursor: pointer;
    z-index: 50;
    transition: background-color 0.2s ease;
}

.fp-interactive-area:hover {
    background-color: rgba(0, 0, 0, 0.15);
    border-color: rgba(0, 0, 0, 0.4);
}

.fp-interactive-area.fp-youtube-area {
    background-color: rgba(220, 0, 0, 0.05);
    border: 1px dashed rgba(220, 0, 0, 0.3);
}

.fp-interactive-area.fp-youtube-area:hover {
    background-color: rgba(220, 0, 0, 0.15);
    border-color: rgba(220, 0, 0, 0.5);
}

.fp-interactive-area.fp-page-jump-area {
    background-color: rgba(0, 180, 0, 0.05);
    border: 1px dashed rgba(0, 180, 0, 0.3);
}

.fp-interactive-area.fp-page-jump-area:hover {
    background-color: rgba(0, 180, 0, 0.15);
    border-color: rgba(0, 0, 0, 0.5);
}

/* Icono de área de audio */
.fp-audio-area {
    position: relative;
}

.fp-audio-icon {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 25px;
    height: 25px;
    background-color: var(--fp-accent-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    transition: transform 0.2s, background-color 0.2s;
}

.fp-audio-icon::before {
    content: '';
    display: block;
    width: 12px;
    height: 12px;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='white' d='M320 64c0-12.2-6.7-23.5-17.3-29.1s-23.8-5.2-33.9 2L69.8 132.7C45.1 148.5 32 175.5 32 204v104c0 28.5 13.1 55.5 37.8 71.3l199 95.8c10.2 7.2 23.4 7.7 33.9 2s17.3-16.9 17.3-29.1V64zM352 400.2c0 12.1 6.8 23.2 17.7 28.6s23.8 4.8 33.9-2.3l17.8-12.6c8.8-6.2 14-16.2 14-27.1V226.8c0-10.8-5.2-20.9-14-27.1l-17.8-12.6c-10-7.1-23-7.8-33.9-2.3s-17.7 16.6-17.7 28.6V400.2z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
}

.fp-audio-icon:hover {
    transform: translate(-50%, -50%) scale(1.2);
    background-color: #f23545;
}

.fp-audio-area.playing .fp-audio-icon::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 512'%3E%3Cpath fill='white' d='M48 64C21.5 64 0 85.5 0 112V400c0 26.5 21.5 48 48 48H80c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H48zm192 0c-26.5 0-48 21.5-48 48V400c0 26.5 21.5 48 48 48h32c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48H240z'/%3E%3C/svg%3E");
}

/* Tooltip para áreas interactivas */
.fp-interactive-tooltip {
    position: absolute;
    top: -30px;
    left: 50%;
    transform: translateX(-50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.2s;
    z-index: 100;
}

.fp-interactive-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: rgba(0, 0, 0, 0.8) transparent transparent transparent;
}

.fp-interactive-area:hover .fp-interactive-tooltip {
    opacity: 1;
}

/* Popup para videos y contenido */
.fp-popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.fp-popup {
    background-color: white;
    border-radius: 5px;
    max-width: 800px;
    width: 90%;
    max-height: 90vh;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}


.fp-popup-header {
    padding: 15px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #ddd;
}

.fp-popup-header h3 {
    margin: 0;
    padding: 0;
    font-size: 18px;
    color: #333;
}



.fp-popup-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #777;
}

.fp-popup-close:hover {
    color: #333;
}

.fp-popup-body {
    padding: 0;
    overflow: auto;
    flex-grow: 1;
}

.fp-video-container {
    position: relative;
    width: 100%;
    height: 0;
    padding-bottom: 56.25%;
    overflow: hidden;
}

.fp-video-container iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: 0;
}

/* Selector de color de fondo */
.fp-background-picker {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 100;
    display: flex;
    gap: 5px;
}

.fp-background-option {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid transparent;
    transition: transform 0.2s;
}

.fp-background-option.active {
    border-color: white;
    transform: scale(1.2);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
}

.fp-background-light {
    background-color: #f0f0f0;
}


/* --- Responsividad --- */
@media (max-width: 992px) {
    .fp-pages-container {
        width: 95%;
        height: 95%;
    }
}

@media (max-width: 768px) {
    :root {
        --fp-toolbar-height: auto;
        --fp-arrow-size: 35px;
    }

    .flipbook-container {
        height: 75vh;
        min-height: 400px;
    }

    .fp-toolbar {
        padding: 8px 10px;
        justify-content: center;
        gap: 8px;
    }

    .fp-arrow-left {
        left: 5px;
    }

    .fp-arrow-right {
        right: 5px;
    }

    .fp-zoom-slider {
        width: 80px;
    }

    .fp-audio-container {
        margin-left: 0;
        order: 5;
        width: 100%;
        text-align: center;
    }

    .fp-audio-player {
        max-width: 90%;
    }
}

@media (max-width: 480px) {
    .fp-toolbar-group {
        gap: 3px;
    }

    .fp-tool-btn {
        font-size: 16px;
        padding: 5px 6px;
    }

    .fp-zoom-slider {
        width: 70px;
    }

    .fp-page-input {
        width: 40px;
    }

    .fp-page-indicator {
        font-size: 12px;
    }

    :root {
        --fp-arrow-size: 30px;
    }

    .flipbook-container {
        height: 70vh;
    }
}
</file>

<file path="flipbook-contraplano/flipbook-plugin.php">
<?php

/**
 * Plugin Name: Flipbook Contraplano
 * Description: Plugin para crear y mostrar flipbooks en WordPress. Permite subir PDFs y audios por página. Está bonito hehe.
 * Version: 15.04.2025
 * Author: Walter C., Matías F.
 */

if (!defined('ABSPATH')) exit;

define('FP_PLUGIN_PATH', plugin_dir_path(__FILE__));
define('FP_PLUGIN_URL', plugin_dir_url(__FILE__));

// Registrar tipo de contenido personalizado
function fp_register_flipbook_post_type()
{
    register_post_type('flipbook', [
        'labels' => ['name' => 'Flipbooks'],
        'public' => true,
        'has_archive' => true,
        'menu_icon' => 'dashicons-book',
        'supports' => ['title'],
    ]);
}
add_action('init', 'fp_register_flipbook_post_type');

// Metabox para PDF y audios
function fp_add_meta_box()
{
    add_meta_box('fp_meta_box', 'Configuración del Flipbook', 'fp_meta_callback', 'flipbook', 'normal', 'high');
}
add_action('add_meta_boxes', 'fp_add_meta_box');

function fp_meta_callback($post)
{
    wp_nonce_field('fp_save_meta_data', 'fp_meta_nonce');
    $pdf = get_post_meta($post->ID, 'fp_pdf', true);
    $audios = get_post_meta($post->ID, 'fp_audios', true) ?: [];
?>
    <p>
        <label for="fp_pdf">PDF del Flipbook:</label><br>
        <input type="text" name="fp_pdf" id="fp_pdf" value="<?php echo esc_url($pdf); ?>" style="width:80%;" readonly>
        <button type="button" class="button" id="fp_pdf_button" title="Seleccionar o subir archivo PDF">Subir PDF</button>
    </p>
    <hr>
    <p><strong>Audios por página:</strong> (El primer audio corresponde a la página 1, el segundo a la página 2, etc.)</p>
    <div id="fp_audio_container">
        <?php foreach ($audios as $index => $audio_url):
            $field_id = 'fp_audio_' . $index;
        ?>
            <div class="fp-audio-row" style="margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #eee;">
                <label for="<?php echo esc_attr($field_id); ?>" style="display: inline-block; width: 80px;">Página <?php echo $index + 1; ?>:</label>
                <input type="text" name="fp_audios[]" id="<?php echo esc_attr($field_id); ?>" value="<?php echo esc_url($audio_url); ?>" style="width:70%; margin-right: 5px;" placeholder="URL del archivo de audio">
                <button type="button" class="button remove-audio" title="Eliminar este audio">X</button>
            </div>
        <?php endforeach; ?>
    </div>
    <button type="button" class="button" id="add_audio_button">+ Agregar Audio</button>

    <script type="text/javascript">
        jQuery(document).ready(function($) {
            var pdf_frame;
            $('#fp_pdf_button').on('click', function(event) {
                event.preventDefault();
                if (pdf_frame) {
                    pdf_frame.open();
                    return;
                }
                pdf_frame = wp.media({
                    title: 'Seleccionar PDF',
                    button: {
                        text: 'Usar este PDF'
                    },
                    library: {
                        type: 'application/pdf'
                    },
                    multiple: false
                });
                pdf_frame.on('select', function() {
                    var attachment = pdf_frame.state().get('selection').first().toJSON();
                    $('#fp_pdf').val(attachment.url);
                });
                pdf_frame.open();
            });

            // Add Audio Field
            var audioIndex = <?php echo count($audios); ?>;
            $('#add_audio_button').on('click', function() {
                audioIndex++;
                var fieldId = 'fp_audio_' + audioIndex;
                var newField =
                    '<div class="fp-audio-row" style="margin-bottom: 10px; padding-bottom: 10px; border-bottom: 1px solid #eee;">' +
                    '  <label for="' + fieldId + '" style="display: inline-block; width: 80px;">Página ' + (audioIndex) + ':</label>' +
                    '  <input type="text" name="fp_audios[]" id="' + fieldId + '" value="" style="width:70%; margin-right: 5px;" placeholder="URL del archivo de audio">' +
                    '  <button type="button" class="button remove-audio" title="Eliminar este audio">X</button>' +
                    '</div>';
                $('#fp_audio_container').append(newField);
                updateAudioLabels();
            });

            $('#fp_audio_container').on('click', '.remove-audio', function() {
                $(this).closest('.fp-audio-row').remove();
                updateAudioLabels();
            });

            function updateAudioLabels() {
                $('#fp_audio_container .fp-audio-row').each(function(index) {
                    $(this).find('label').html('Página ' + (index + 1) + ':');
                });
                audioIndex = $('#fp_audio_container .fp-audio-row').length;
            }

        });
    </script>
<?php
}

function fp_save_meta($post_id)
{
    if (!isset($_POST['fp_meta_nonce']) || !wp_verify_nonce($_POST['fp_meta_nonce'], 'fp_save_meta_data')) return;
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
    if (!current_user_can('edit_post', $post_id)) return;

    update_post_meta($post_id, 'fp_pdf', sanitize_url($_POST['fp_pdf'] ?? ''));
    update_post_meta($post_id, 'fp_audios', array_map('sanitize_url', $_POST['fp_audios'] ?? []));
}
add_action('save_post_flipbook', 'fp_save_meta');

// Shortcode para visualizar el Flipbook
function fp_flipbook_shortcode($atts)
{
    $atts = shortcode_atts(['id' => ''], $atts, 'flipbook');
    $post_id = absint($atts['id']);
    if (!$post_id || get_post_type($post_id) !== 'flipbook') return '<p>Error: Flipbook no encontrado.</p>';

    $pdf = get_post_meta($post_id, 'fp_pdf', true);
    // $audios = get_post_meta($post_id, 'fp_audios', true) ?: []; // Audios hidden for ISSUU style
    if (empty($pdf)) return '<p>Error: No se ha configurado un PDF para este Flipbook.</p>';

    // Registrar y encolar estilos y scripts
    wp_register_style('fp-style', plugins_url('css/fp-front.css', __FILE__), [], '1.2.0'); // Version bump
    wp_enqueue_style('fp-style');
    wp_enqueue_script('fp-custom-zoom'); // Enqueue the custom zoom script
    wp_enqueue_script('fp-custom-zoom', plugins_url('js/fp-custom-zoom.js', __FILE__), array('jquery'), '1.0.0', true);
    wp_enqueue_script('pdfjs', 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js', [], null, true);
    wp_register_script('fp-front', plugins_url('js/fp-front.js', __FILE__), ['jquery', 'pdfjs'], '1.2.0', true); // Version bump
    wp_enqueue_script('fp-front');

    // Pass only necessary data
    wp_localize_script('fp-front', 'fpConfig', [
        'pdfWorkerSrc' => 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js',
        'postId' => $post_id
        // 'audios' => $audios // Don't pass audios
    ]);

    ob_start();
?>
    <div id="flipbook-container-<?php echo $post_id; ?>" class="flipbook-container" data-pdf="<?php echo esc_url($pdf); ?>" data-view-mode="single"> <!-- Default to single view -->
        <div class="fp-viewer-area">
            <div class="fp-pdf-viewer">
                <div class="fp-pages-container"></div>
                <div class="fp-loading">Cargando...</div>
            </div>
            <button class="fp-arrow fp-arrow-left" aria-label="Página anterior" title="Página anterior">‹</button>
            <button class="fp-arrow fp-arrow-right" aria-label="Página siguiente" title="Página siguiente">›</button>
        </div>

        <div class="fp-toolbar">
            <div class="fp-toolbar-section fp-page-nav">
                <div class="fp-page-indicator">
                    <input type="number" class="fp-page-input" value="1" min="1" aria-label="Página actual">
                    <span class="fp-page-separator">/</span>
                    <span class="fp-total-pages">?</span>
                </div>
            </div>

            <div class="fp-toolbar-section fp-zoom-container">
                <button class="fp-tool-btn fp-zoom-out" title="Alejar (Ctrl+-)" aria-label="Alejar">－</button>
                <button class="fp-tool-btn fp-zoom-in" title="Acercar (Ctrl++)" aria-label="Acercar">＋</button>
            </div>

            <div class="fp-toolbar-section fp-tools-right">
                <button class="fp-tool-btn fp-fullscreen" title="Pantalla completa (F)" aria-label="Pantalla completa">⛶</button>
            </div>
        </div>

        <!-- Audio player is removed/hidden via CSS -->
        <!-- <audio id="fp-audio-<?php echo $post_id; ?>" controls class="fp-audio-player"></audio> -->
    </div>
<?php
    return ob_get_clean();
}
add_shortcode('flipbook', 'fp_flipbook_shortcode');

// Agregar botón "Insertar Flipbook" al editor
function fp_add_insert_flipbook_button()
{
    // Verificar si estamos en el editor
    $screen = get_current_screen();
    if (!$screen || !method_exists($screen, 'is_block_editor') || $screen->is_block_editor()) {
        // No cargar en Gutenberg, solo en el editor clásico
        return;
    }

    wp_enqueue_script(
        'fp-insert-flipbook',
        FP_PLUGIN_URL . 'js/fp-insert-flipbook.js',
        array('jquery'),
        '1.0.0',
        true
    );

    // Pasar datos de flipbooks disponibles al script
    $flipbooks = get_posts([
        'post_type' => 'flipbook',
        'numberposts' => -1,
        'orderby' => 'title',
        'order' => 'ASC'
    ]);

    $flipbooks_data = [];
    foreach ($flipbooks as $flipbook) {
        $flipbooks_data[] = [
            'id' => $flipbook->ID,
            'title' => $flipbook->post_title
        ];
    }

    wp_localize_script('fp-insert-flipbook', 'fpInsertData', [
        'flipbooks' => $flipbooks_data,
        'button_text' => 'Insertar Flipbook',
        'modal_title' => 'Seleccionar un Flipbook',
        'modal_button' => 'Insertar',
        'cancel_button' => 'Cancelar'
    ]);
}
add_action('admin_enqueue_scripts', 'fp_add_insert_flipbook_button');

// Para el editor de Gutenberg - Registrar bloque
function fp_register_gutenberg_flipbook_button()
{
    // Solo cargar en admin y si Gutenberg está activo
    if (!is_admin() || !function_exists('register_block_type')) {
        return;
    }

    wp_register_script(
        'fp-gutenberg-button',
        FP_PLUGIN_URL . 'js/fp-gutenberg-button.js',
        array('wp-blocks', 'wp-element', 'wp-components', 'wp-editor', 'wp-api-fetch'),
        '1.0.0',
        true
    );

    // Pasar datos de flipbooks disponibles al script
    $flipbooks = get_posts([
        'post_type' => 'flipbook',
        'numberposts' => -1,
        'orderby' => 'title',
        'order' => 'ASC'
    ]);

    $flipbooks_data = [];
    foreach ($flipbooks as $flipbook) {
        $flipbooks_data[] = [
            'id' => $flipbook->ID,
            'title' => $flipbook->post_title
        ];
    }

    wp_localize_script('fp-gutenberg-button', 'fpGutenbergData', [
        'flipbooks' => $flipbooks_data
    ]);

    register_block_type('flipbook-contraplano/insert-button', [
        'editor_script' => 'fp-gutenberg-button',
    ]);
}
add_action('init', 'fp_register_gutenberg_flipbook_button');
</file>

</files>
